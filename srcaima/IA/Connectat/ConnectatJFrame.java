/*
 * ConnectatJFrame.java
 *
 * Created on 11 de abril de 2006, 15:00
 */

package IA.Connectat;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;

import aima.search.framework.*;
import aima.search.informed.SimulatedAnnealingSearch;
import aima.search.informed.HillClimbingSearch;
import javax.swing.UIManager;

/**
 *
 * @author  mb
 */
public class ConnectatJFrame extends javax.swing.JFrame {
    
    // Variables locals pel problema
    ConnectatBoard ciutat;
    ConnectatBoard ciutat2;
    ConnectatCercador cerca;
    SuccessorFunction operadors;
    HeuristicFunction heuristic;
    //Variables per a escriurte el fitxer resultat
    int info_einicial, info_operadors, info_heuristic, info_k, info_iter, info_passos_iter;
    String info_algoritme;
    double info_lambda;
    
    /** Creates new form ConnectatJFrame */
    public ConnectatJFrame() {
        initComponents();
        
        // Insertar etiqueta d'error i arreglar les posicions
        errorLabel = new javax.swing.JLabel();
        getContentPane().add(errorLabel, BorderLayout.PAGE_START);
        /*getContentPane().remove(jTabbedPane1);
        getContentPane().add(jTabbedPane1, BorderLayout.CENTER);*/
        dibuixCiutatHC.setVisible(false);
        dibuixCiutatSA.setVisible(false);
        
        error(null);
        valorsPerDefecte();
        actualitzarOperadors();
        actualitzarHeuristic();
        
        ciutat.generarCiutat(Integer.parseInt(nText.getText()),Integer.parseInt(mText.getText()),Integer.parseInt(nCentralsText.getText()),Integer.parseInt(nRepetidorsText.getText()));
        dibuixCiutat1.novaCiutat(ciutat);
        errorInicialLabel.setText("Error Inicial: "+ciutat.getErrorTotal());
        
        /*
        int width = 200;
        int height = 200;
        ciutat = new ConnectatBoard();
        dibuixCiutat1 = new DibuixCiutat(width,height,ciutat.getM(),ciutat.getN(),ciutat.getCentrals(),ciutat.getRepetidors(),ciutat.getConnexions());
    */}
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelInici = new javax.swing.JPanel();
        panelIniciParams = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        nText = new javax.swing.JTextField();
        mText = new javax.swing.JTextField();
        nCentralsText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        nRepetidorsText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        generarCiutatButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        estatInicialCombo = new javax.swing.JComboBox();
        estatInicialButton = new javax.swing.JButton();
        errorInicialLabel = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        maxrepText = new javax.swing.JTextField();
        alfaText = new javax.swing.JTextField();
        betaText = new javax.swing.JTextField();
        gammaText = new javax.swing.JTextField();
        actualitzarParamsButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        perDefecteParamsButton = new javax.swing.JButton();
        panelIniciCiutat = new javax.swing.JPanel();
        int width = 200;
        int height = 200;
        ciutat = new ConnectatBoard();
        dibuixCiutat1 = new DibuixCiutat(width,height,ciutat.getM(),ciutat.getN(),ciutat.getCentrals(),ciutat.getRepetidors(),ciutat.getConnexions());
        panelParams = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        operadorsCombo = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        operadorsInfo = new javax.swing.JTextPane();
        jPanel13 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        heuristicCombo = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        heuristicInfo = new javax.swing.JTextPane();
        jPanel14 = new javax.swing.JPanel();
        hillClimbingButton = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        kText = new javax.swing.JTextField();
        iteracionsText = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        passosText = new javax.swing.JTextField();
        lambdaText = new javax.swing.JTextField();
        simulatedAnButton = new javax.swing.JButton();
        panelHillClimbing = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        hillClimbingButton1 = new javax.swing.JButton();
        errorInicialLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        infoHC = new javax.swing.JTextPane();
        panelIniciCiutat1 = new javax.swing.JPanel();
        dibuixCiutatHC = new IA.Connectat.DibuixCiutat();
        panelSimulatedAnnealing = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        simulatedAnButton1 = new javax.swing.JButton();
        errorInicialLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        infoSA = new javax.swing.JTextPane();
        panelIniciCiutat3 = new javax.swing.JPanel();
        dibuixCiutatSA = new IA.Connectat.DibuixCiutat();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        Salir = new javax.swing.JMenuItem();

        jMenu1.setText("Menu");
        jMenuBar1.add(jMenu1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Connecta't");
        setResizable(false);

        jTabbedPane1.setMaximumSize(new java.awt.Dimension(825, 558));
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(825, 558));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(825, 558));
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        panelInici.setLayout(new java.awt.GridBagLayout());

        panelIniciParams.setMaximumSize(new java.awt.Dimension(320, 500));
        panelIniciParams.setMinimumSize(new java.awt.Dimension(320, 500));
        panelIniciParams.setPreferredSize(new java.awt.Dimension(320, 500));
        panelIniciParams.setLayout(new javax.swing.BoxLayout(panelIniciParams, javax.swing.BoxLayout.Y_AXIS));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Paràmetres de la Ciutat"));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("N:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel5.add(jLabel2, gridBagConstraints);

        nText.setColumns(3);
        nText.setToolTipText("Amplada de la ciutat");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel5.add(nText, gridBagConstraints);

        mText.setColumns(3);
        mText.setToolTipText("Alçada de la ciutat");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel5.add(mText, gridBagConstraints);

        nCentralsText.setColumns(3);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel5.add(nCentralsText, gridBagConstraints);

        jLabel3.setText("num.centrals:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 5);
        jPanel5.add(jLabel3, gridBagConstraints);

        jLabel4.setText("num.repet.:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 5);
        jPanel5.add(jLabel4, gridBagConstraints);

        nRepetidorsText.setColumns(3);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel5.add(nRepetidorsText, gridBagConstraints);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("M:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel5.add(jLabel1, gridBagConstraints);

        generarCiutatButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        generarCiutatButton.setText("Generar Ciutat");
        generarCiutatButton.setMaximumSize(new java.awt.Dimension(170, 35));
        generarCiutatButton.setMinimumSize(new java.awt.Dimension(170, 35));
        generarCiutatButton.setPreferredSize(new java.awt.Dimension(170, 35));
        generarCiutatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarCiutatButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel5.add(generarCiutatButton, gridBagConstraints);

        panelIniciParams.add(jPanel5);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Estat inicial"));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jLabel9.setText("Tipus d'estat inicial:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel6.add(jLabel9, gridBagConstraints);

        estatInicialCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aleatori (tal com s'han creat)", "Aleatori, centrals amb tres connexions", "Distància mínima entre centrals", "Distància mínima, centrals amb tres connexions", "Distància mínima, amb repetidors" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel6.add(estatInicialCombo, gridBagConstraints);

        estatInicialButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        estatInicialButton.setText("Generar Estat Inicial");
        estatInicialButton.setMaximumSize(new java.awt.Dimension(190, 35));
        estatInicialButton.setMinimumSize(new java.awt.Dimension(190, 35));
        estatInicialButton.setPreferredSize(new java.awt.Dimension(190, 35));
        estatInicialButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estatInicialButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel6.add(estatInicialButton, gridBagConstraints);

        errorInicialLabel.setText("Error Inicial: 0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel6.add(errorInicialLabel, gridBagConstraints);

        panelIniciParams.add(jPanel6);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Paràmetres del Problema"));
        jPanel12.setLayout(new java.awt.GridBagLayout());

        jLabel26.setText("nombre màxim de repetidors:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel12.add(jLabel26, gridBagConstraints);

        jLabel27.setText("gamma:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 5);
        jPanel12.add(jLabel27, gridBagConstraints);

        jLabel28.setText("beta:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 5);
        jPanel12.add(jLabel28, gridBagConstraints);

        jLabel29.setText("alfa:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel12.add(jLabel29, gridBagConstraints);

        maxrepText.setColumns(3);
        maxrepText.setText("10");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel12.add(maxrepText, gridBagConstraints);

        alfaText.setColumns(3);
        alfaText.setText("3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel12.add(alfaText, gridBagConstraints);

        betaText.setColumns(3);
        betaText.setText("2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        jPanel12.add(betaText, gridBagConstraints);

        gammaText.setColumns(3);
        gammaText.setText("1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        jPanel12.add(gammaText, gridBagConstraints);

        actualitzarParamsButton.setFont(new java.awt.Font("MS Sans Serif", 1, 11)); // NOI18N
        actualitzarParamsButton.setText("Actualitzar paràmetres");
        actualitzarParamsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualitzarParamsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel12.add(actualitzarParamsButton, gridBagConstraints);

        panelIniciParams.add(jPanel12);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        perDefecteParamsButton.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        perDefecteParamsButton.setText("valors per defecte");
        perDefecteParamsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perDefecteParamsActionPerformed(evt);
            }
        });
        jPanel1.add(perDefecteParamsButton);

        panelIniciParams.add(jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        panelInici.add(panelIniciParams, gridBagConstraints);

        panelIniciCiutat.setBorder(javax.swing.BorderFactory.createTitledBorder("Ciutat"));
        panelIniciCiutat.setMaximumSize(new java.awt.Dimension(800, 800));
        panelIniciCiutat.setMinimumSize(new java.awt.Dimension(500, 500));
        panelIniciCiutat.setPreferredSize(new java.awt.Dimension(500, 500));
        panelIniciCiutat.setLayout(new java.awt.BorderLayout());
        panelIniciCiutat.add(dibuixCiutat1, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        panelInici.add(panelIniciCiutat, gridBagConstraints);

        jTabbedPane1.addTab("Opcions Inicials", panelInici);

        panelParams.setLayout(new javax.swing.BoxLayout(panelParams, javax.swing.BoxLayout.Y_AXIS));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Operadors"));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel6.setText("Conjunt d'operadors:");
        jPanel4.add(jLabel6, new java.awt.GridBagConstraints());

        operadorsCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1: Afegir repetidor entre dos nodes", "2: TreureRepetidor + AfegirRepetidor", "3: afegir repet. entre 2-5 nodes", "4: 3+treure rep.", "5: 1+swap", "6: 1+moure aresta", "7: 1+moure aresta+swap" }));
        operadorsCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operadorsComboActionPerformed(evt);
            }
        });
        jPanel4.add(operadorsCombo, new java.awt.GridBagConstraints());

        operadorsInfo.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));
        operadorsInfo.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        operadorsInfo.setEditable(false);
        operadorsInfo.setMinimumSize(new java.awt.Dimension(2, 64));
        operadorsInfo.setPreferredSize(new java.awt.Dimension(2, 64));
        jScrollPane3.setViewportView(operadorsInfo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel4.add(jScrollPane3, gridBagConstraints);

        panelParams.add(jPanel4);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Heurístic"));
        jPanel13.setLayout(new java.awt.GridBagLayout());

        jLabel8.setText("Heurístic utilitzat:");
        jPanel13.add(jLabel8, new java.awt.GridBagConstraints());

        heuristicCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Error Total", "Error total + num. repetidors", "Error total x num. repetidors", "(Error total * num. repetidors) / Sum. graus repet.", "(Error total + num. repetidors)*dist. màxima" }));
        heuristicCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heuristicComboActionPerformed(evt);
            }
        });
        jPanel13.add(heuristicCombo, new java.awt.GridBagConstraints());

        heuristicInfo.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));
        heuristicInfo.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        heuristicInfo.setEditable(false);
        heuristicInfo.setMinimumSize(new java.awt.Dimension(2, 64));
        heuristicInfo.setPreferredSize(new java.awt.Dimension(2, 64));
        jScrollPane1.setViewportView(heuristicInfo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel13.add(jScrollPane1, gridBagConstraints);

        panelParams.add(jPanel13);

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("Hill Climbing"));
        jPanel14.setLayout(new java.awt.GridBagLayout());

        hillClimbingButton.setFont(new java.awt.Font("MS Sans Serif", 1, 14)); // NOI18N
        hillClimbingButton.setText("Iniciar Hill Climbing");
        hillClimbingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hillClimbingButtonActionPerformed(evt);
            }
        });
        jPanel14.add(hillClimbingButton, new java.awt.GridBagConstraints());

        panelParams.add(jPanel14);

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Simulated Annealing"));
        jPanel15.setLayout(new java.awt.GridBagLayout());

        jLabel18.setText("K:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel15.add(jLabel18, gridBagConstraints);

        kText.setColumns(3);
        kText.setText("5");
        kText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kTextActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        jPanel15.add(kText, gridBagConstraints);

        iteracionsText.setColumns(4);
        iteracionsText.setText("2000");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        jPanel15.add(iteracionsText, gridBagConstraints);

        jLabel19.setText("iteracions:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 5);
        jPanel15.add(jLabel19, gridBagConstraints);

        jLabel20.setText("passos per iteració:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 5);
        jPanel15.add(jLabel20, gridBagConstraints);

        jLabel21.setText("lambda:");
        jLabel21.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 5);
        jPanel15.add(jLabel21, gridBagConstraints);

        passosText.setColumns(3);
        passosText.setText("5");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        jPanel15.add(passosText, gridBagConstraints);

        lambdaText.setColumns(4);
        lambdaText.setText("0.001");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        jPanel15.add(lambdaText, gridBagConstraints);

        simulatedAnButton.setFont(new java.awt.Font("MS Sans Serif", 1, 14)); // NOI18N
        simulatedAnButton.setText("Iniciar Simulated Annealing");
        simulatedAnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulatedAnButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        jPanel15.add(simulatedAnButton, gridBagConstraints);

        panelParams.add(jPanel15);

        jTabbedPane1.addTab("Paràmetres", panelParams);

        panelHillClimbing.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                panelHillClimbingFocusGained(evt);
            }
        });
        panelHillClimbing.setLayout(new java.awt.GridBagLayout());

        jPanel2.setMaximumSize(new java.awt.Dimension(320, 500));
        jPanel2.setMinimumSize(new java.awt.Dimension(320, 500));
        jPanel2.setPreferredSize(new java.awt.Dimension(320, 500));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        hillClimbingButton1.setFont(new java.awt.Font("MS Sans Serif", 1, 14)); // NOI18N
        hillClimbingButton1.setText("Iniciar Hill Climbing");
        hillClimbingButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hillClimbingButtonActionPerformed(evt);
            }
        });
        jPanel2.add(hillClimbingButton1, new java.awt.GridBagConstraints());

        errorInicialLabel1.setText("Error Inicial: 0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(errorInicialLabel1, gridBagConstraints);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(320, 400));

        infoHC.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));
        infoHC.setEditable(false);
        jScrollPane2.setViewportView(infoHC);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel2.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        panelHillClimbing.add(jPanel2, gridBagConstraints);

        panelIniciCiutat1.setBorder(javax.swing.BorderFactory.createTitledBorder("Ciutat"));
        panelIniciCiutat1.setMaximumSize(new java.awt.Dimension(800, 800));
        panelIniciCiutat1.setMinimumSize(new java.awt.Dimension(500, 500));
        panelIniciCiutat1.setPreferredSize(new java.awt.Dimension(500, 500));
        panelIniciCiutat1.setLayout(new java.awt.BorderLayout());
        panelIniciCiutat1.add(dibuixCiutatHC, java.awt.BorderLayout.CENTER);

        panelHillClimbing.add(panelIniciCiutat1, new java.awt.GridBagConstraints());

        jTabbedPane1.addTab("Hill Climbing", panelHillClimbing);

        panelSimulatedAnnealing.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                panelSimulatedAnnealingFocusGained(evt);
            }
        });
        panelSimulatedAnnealing.setLayout(new java.awt.GridBagLayout());

        jPanel3.setMaximumSize(new java.awt.Dimension(320, 500));
        jPanel3.setMinimumSize(new java.awt.Dimension(320, 500));
        jPanel3.setPreferredSize(new java.awt.Dimension(320, 500));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        simulatedAnButton1.setFont(new java.awt.Font("MS Sans Serif", 1, 14)); // NOI18N
        simulatedAnButton1.setText("Iniciar Simulated Annealing");
        simulatedAnButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulatedAnButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel3.add(simulatedAnButton1, gridBagConstraints);

        errorInicialLabel2.setText("Error Inicial: 0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(errorInicialLabel2, gridBagConstraints);

        jScrollPane4.setPreferredSize(new java.awt.Dimension(320, 400));

        infoSA.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));
        infoSA.setEditable(false);
        jScrollPane4.setViewportView(infoSA);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel3.add(jScrollPane4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        panelSimulatedAnnealing.add(jPanel3, gridBagConstraints);

        panelIniciCiutat3.setBorder(javax.swing.BorderFactory.createTitledBorder("Ciutat"));
        panelIniciCiutat3.setMaximumSize(new java.awt.Dimension(800, 800));
        panelIniciCiutat3.setMinimumSize(new java.awt.Dimension(500, 500));
        panelIniciCiutat3.setPreferredSize(new java.awt.Dimension(500, 500));
        panelIniciCiutat3.setLayout(new java.awt.BorderLayout());
        panelIniciCiutat3.add(dibuixCiutatSA, java.awt.BorderLayout.CENTER);

        panelSimulatedAnnealing.add(panelIniciCiutat3, new java.awt.GridBagConstraints());

        jTabbedPane1.addTab("Simulated Annealing", panelSimulatedAnnealing);

        getContentPane().add(jTabbedPane1);

        jMenu2.setText("Menu");

        Salir.setLabel("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });
        jMenu2.add(Salir);

        jMenuBar2.add(jMenu2);

        setJMenuBar(jMenuBar2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
// TODO add your handling code here:
         dispose();
    }//GEN-LAST:event_SalirActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        switch (jTabbedPane1.getSelectedIndex()){
            case 2:
                dibuixCiutatHC.setVisible(true);
                break;
            case 3:
                dibuixCiutatSA.setVisible(true);
                break;
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void panelHillClimbingFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_panelHillClimbingFocusGained
        dibuixCiutatHC.setVisible(true);
    }//GEN-LAST:event_panelHillClimbingFocusGained

    private void panelSimulatedAnnealingFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_panelSimulatedAnnealingFocusGained
        dibuixCiutatSA.setVisible(true);
    }//GEN-LAST:event_panelSimulatedAnnealingFocusGained

    private void simulatedAnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simulatedAnButtonActionPerformed
     setCursor(new Cursor(Cursor.WAIT_CURSOR));
     if (comprovarParamsSimulatedAnnealing()) return;
     int k,it,pit;
     double lbd;
     k = Integer.parseInt(kText.getText());
     it = Integer.parseInt(iteracionsText.getText());
     pit = Integer.parseInt(passosText.getText());
     lbd = Float.parseFloat(lambdaText.getText());
     try{
         info_algoritme="SA";
         info_iter=it;
         info_k=k;
         info_passos_iter=pit;
         info_lambda=lbd;
         
         cerca = new ConnectatCercador(ciutat,operadors,heuristic,it,pit,k,lbd);
         cerca.executarCerca();
         infoSA.setText("");
         infoSA.setText("Error Final: "+cerca.getEstatFinal().getErrorTotal()+"\nRepetidors Usats: "+cerca.getEstatFinal().getNumRepetidors()+"\n"+cerca.getPropietats()+cerca.getAccions());
         cerca.fitxerResultats(ciutat,info_einicial,info_algoritme, info_operadors, info_heuristic, info_k, info_iter, info_passos_iter, info_lambda);
         dibuixCiutatSA.novaCiutat(cerca.getEstatFinal());
         dibuixCiutatSA.actualitzar();
     } catch (Exception e){
         error(e.toString());
         setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
     }
         setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_simulatedAnButtonActionPerformed

    
    private void hillClimbingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hillClimbingButtonActionPerformed
     setCursor(new Cursor(Cursor.WAIT_CURSOR));
        try{
         info_algoritme="HC";
         info_iter=-1;
         info_k=-1;
         info_passos_iter=-1;
         info_lambda=-1;
         
         cerca = new ConnectatCercador(ciutat,operadors,heuristic);
         cerca.executarCerca();
         infoHC.setText("");
         infoHC.setText("Error Final: "+cerca.getEstatFinal().getErrorTotal()+"\nRepetidors Usats: "+cerca.getEstatFinal().getNumRepetidors()+"\n"+cerca.getPropietats()+cerca.getAccions());
         cerca.fitxerResultats(ciutat,info_einicial,info_algoritme, info_operadors, info_heuristic, info_k, info_iter, info_passos_iter, info_lambda);
         dibuixCiutatHC.novaCiutat(cerca.getEstatFinal());
         dibuixCiutatHC.actualitzar();
     } catch (Exception e){
         error(e.toString());
         setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
     }
     setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_hillClimbingButtonActionPerformed

    private void heuristicComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heuristicComboActionPerformed
        actualitzarHeuristic();
    }//GEN-LAST:event_heuristicComboActionPerformed

    private void operadorsComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operadorsComboActionPerformed
        actualitzarOperadors();
    }//GEN-LAST:event_operadorsComboActionPerformed

    private void actualitzarOperadors(){
        int op = operadorsCombo.getSelectedIndex();
        info_operadors=op+1;
         switch (op){
             case 0:
                 operadors = new ConnectatSuccessorFunction1();
                 operadorsInfo.setText("Afegeix un repetidor no usat entre dos nodes directament connectats. Desconnecta els dos nodes i els connecta al repetidor.");
                 break;
             case 1:
                 operadors = new ConnectatSuccessorFunction2();
                 operadorsInfo.setText("Treure repetidor desconnecta el repetidor de tots els seus veïns i els connecta entre ells formant un camí.");
                 break;
             case 2:
                 operadors = new ConnectatSuccessorFunction3();
                 operadorsInfo.setText("Afegeix repetidor no usat entre un conjunt de nodes, entre 2 i 5, que formin un camí entre ells. Desconnecta tots els nodes i els connecta directament al repetidor afegit.");
                 break;
             case 3:
                 operadors = new ConnectatSuccessorFunction4();
                 operadorsInfo.setText("Afegeix repetidor entre 2-5 nodes, i també els pot treure.");
                 break;
             case 4:
                 operadors = new ConnectatSuccessorFunction5();
                 operadorsInfo.setText("Afegir repetidor entre 2 nodes, i fer un swap entre dos nodes, intercanviant totes les arestes d'un a l'altre node.");
                 break;
             case 5:
                 operadors = new ConnectatSuccessorFunction6();
                 operadorsInfo.setText("Afegir repetidor entre dos nodes, i també moure una aresta existent sense formar bucles.");
                 break;
             case 6:
                 operadors = new ConnectatSuccessorFunction7();
                 operadorsInfo.setText("Afegir repetidor entre dos nodes, swap de dos nodes i moure aresta.");
                 break;
             default:
                 operadorsInfo.setText("operador no definit");
                 
         }
    }
    
    private void actualitzarHeuristic(){
        int heu = heuristicCombo.getSelectedIndex();
        info_heuristic=heu+1;
         switch (heu){
             case 0:
                 heuristic = new ConnectatHeuristicFunction1();
                 heuristicInfo.setText("Minimitza tan sols l'error total del graf.");
                 break;
             case 1:
                 heuristic = new ConnectatHeuristicFunction2();
                 heuristicInfo.setText("Minimitza l'error total + els repetidors usats");
                 break;
             case 2:
                 heuristic = new ConnectatHeuristicFunction3();
                 heuristicInfo.setText("Minimitza l'error total * els repetidors usats");
                 break;
             case 3:
                 heuristic = new ConnectatHeuristicFunction4();
                 heuristicInfo.setText("Minimitza l'error total * els repetidors usats, i a més maximitza el sumatori de graus dels repetidors");
                 break;
             case 4:
                 heuristic = new ConnectatHeuristicFunction5();
                 heuristicInfo.setText("Minimitza l'error total + els repetidors usats, i a més minimitza la distància màxima entre les arestes del graf");
                 break;
             default:
                 heuristicInfo.setText("heuristic no definit");
                 
         }
    }
    
    private void kTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kTextActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_kTextActionPerformed

    private void perDefecteParamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perDefecteParamsActionPerformed
        valorsPerDefecteParams();
        valorsPerDefecte();
        // Actualitzar Params
        int alfa = Integer.parseInt(alfaText.getText());
        int beta = Integer.parseInt(betaText.getText());
        int gamma = Integer.parseInt(gammaText.getText());
        int maxrep = Integer.parseInt(maxrepText.getText());
        ciutat.actualitzarParametres(alfa,beta,gamma,maxrep);
        errorInicialLabel.setText("Error Inicial: "+ciutat.getErrorTotal());
    }//GEN-LAST:event_perDefecteParamsActionPerformed

    private void actualitzarParamsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualitzarParamsButtonActionPerformed
        if (comprovarParams()) return;
        int alfa = Integer.parseInt(alfaText.getText());
        int beta = Integer.parseInt(betaText.getText());
        int gamma = Integer.parseInt(gammaText.getText());
        int maxrep = Integer.parseInt(maxrepText.getText());
        ciutat.actualitzarParametres(alfa,beta,gamma,maxrep);
        textErrorInicial();
    }//GEN-LAST:event_actualitzarParamsButtonActionPerformed

    private void estatInicialButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estatInicialButtonActionPerformed
        ciutat.generarEstatInicial(estatInicialCombo.getSelectedIndex());
        info_einicial=estatInicialCombo.getSelectedIndex()+1;
        try {
        dibuixCiutat1.actualitzar();
        } catch (Exception e){
            error(e.toString());
        }
        textErrorInicial();
    }//GEN-LAST:event_estatInicialButtonActionPerformed

    private void generarCiutatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarCiutatButtonActionPerformed
        if (comprovarParams()) return;
        ciutat.generarCiutat(Integer.parseInt(nText.getText()),Integer.parseInt(mText.getText()),Integer.parseInt(nCentralsText.getText()),Integer.parseInt(nRepetidorsText.getText()));
        dibuixCiutat1.novaCiutat(ciutat);
        textErrorInicial();
    }//GEN-LAST:event_generarCiutatButtonActionPerformed
    
    private void textErrorInicial(){
        errorInicialLabel.setText("Error Inicial: "+ciutat.getErrorTotal());
        errorInicialLabel1.setText("Error Inicial: "+ciutat.getErrorTotal());
        errorInicialLabel2.setText("Error Inicial: "+ciutat.getErrorTotal());
    }
    
    /**
     * Comprova que no hi hagi incoherencies en les entrades, retorna cert si hi ha algun error
     */
    private boolean comprovarParams() {
        boolean err=false;
        int m=0,n=0,nc=0,nr=0,alfa=0,beta=0,gamma=0,maxrep=0;
        try {
            m = Integer.parseInt(mText.getText());
            n = Integer.parseInt(nText.getText());
            nc = Integer.parseInt(nCentralsText.getText());
            nr = Integer.parseInt(nRepetidorsText.getText());
            alfa = Integer.parseInt(alfaText.getText());
            beta = Integer.parseInt(betaText.getText());
            gamma = Integer.parseInt(gammaText.getText());
            maxrep = Integer.parseInt(maxrepText.getText());
            if (m<0||n<0||nc<0||nr<0||alfa<0||beta<0||gamma<0||maxrep<0) throw new Exception();
        } catch(Exception e){
            error("S'han d'introduir nombres naturals.");
            return true;
        }
        if (nc + nr > m * n) {
            error("Numero de centrals i repetidors massa gran.");
            err=true;
        }
        else if (nc<2) {
            error("Numero de centrals massa petit.");
            err=true;
        }
        else if (alfa<=beta || beta<=gamma ) {
            error("Els paràmetres han de complir alfa > beta > gamma");
            err=true;
        }
        else if (maxrep>nr) {
            error("El nombre màxim de repetidors no pot excedir el nombre de repetidors existents.");
            err=true;
        }
        if (!err) error(null);
        return err;
    }
    private boolean comprovarParamsSimulatedAnnealing() {
        boolean err=false;
        int k=0,it=0,pit=0;
        double lbd = 0.000;
        try {
            k = Integer.parseInt(kText.getText());
            it = Integer.parseInt(iteracionsText.getText());
            pit = Integer.parseInt(passosText.getText());
            lbd = Float.parseFloat(lambdaText.getText());
            if (k<0||it<0||pit<0||lbd<0) throw new Exception();
        } catch(Exception e){
            error("S'han d'introduir nombres majors que zero.");
            return true;
        }
        if (lbd>1.0) {
            error("Lambda ha de ser menor que 1");
            err=true;
        }
        return err;
    }
    
    private void error(String err){
        if (err!=null) {
            errorLabel.setForeground(Color.red);
            errorLabel.setText(" "+err);
        }
        else {
            errorLabel.setForeground(Color.black);
            errorLabel.setText(" Pràctica de Cerca Local d'IA. Albert Sànchez i Marc Boquet, FIB 2006");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    } catch (Exception e) { }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConnectatJFrame().setVisible(true);
            }
        });
    }

    private void valorsPerDefecte() {
        nText.setText("30");
        mText.setText("30");
        nCentralsText.setText("20");
        nRepetidorsText.setText("20");
    }
    private void valorsPerDefecteParams() {
        alfaText.setText("3");
        betaText.setText("2");
        gammaText.setText("1");
        maxrepText.setText("20");
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Salir;
    private javax.swing.JButton actualitzarParamsButton;
    private javax.swing.JTextField alfaText;
    private javax.swing.JTextField betaText;
    private IA.Connectat.DibuixCiutat dibuixCiutat1;
    private IA.Connectat.DibuixCiutat dibuixCiutatHC;
    private IA.Connectat.DibuixCiutat dibuixCiutatSA;
    private javax.swing.JLabel errorInicialLabel;
    private javax.swing.JLabel errorInicialLabel1;
    private javax.swing.JLabel errorInicialLabel2;
    private javax.swing.JButton estatInicialButton;
    private javax.swing.JComboBox estatInicialCombo;
    private javax.swing.JTextField gammaText;
    private javax.swing.JButton generarCiutatButton;
    private javax.swing.JComboBox heuristicCombo;
    private javax.swing.JTextPane heuristicInfo;
    private javax.swing.JButton hillClimbingButton;
    private javax.swing.JButton hillClimbingButton1;
    private javax.swing.JTextPane infoHC;
    private javax.swing.JTextPane infoSA;
    private javax.swing.JTextField iteracionsText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField kText;
    private javax.swing.JTextField lambdaText;
    private javax.swing.JTextField mText;
    private javax.swing.JTextField maxrepText;
    private javax.swing.JTextField nCentralsText;
    private javax.swing.JTextField nRepetidorsText;
    private javax.swing.JTextField nText;
    private javax.swing.JComboBox operadorsCombo;
    private javax.swing.JTextPane operadorsInfo;
    private javax.swing.JPanel panelHillClimbing;
    private javax.swing.JPanel panelInici;
    private javax.swing.JPanel panelIniciCiutat;
    private javax.swing.JPanel panelIniciCiutat1;
    private javax.swing.JPanel panelIniciCiutat3;
    private javax.swing.JPanel panelIniciParams;
    private javax.swing.JPanel panelParams;
    private javax.swing.JPanel panelSimulatedAnnealing;
    private javax.swing.JTextField passosText;
    private javax.swing.JButton perDefecteParamsButton;
    private javax.swing.JButton simulatedAnButton;
    private javax.swing.JButton simulatedAnButton1;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JLabel errorLabel;
}
