/*
 * PracticaIA_1View.java
 */

package IA.Gasolineras;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import java.util.*;
import javax.swing.JOptionPane;
import java.io.*;



/**
 * The application's main frame.
 */
public class PracticaIA_1View extends FrameView {
 static consulta c;
private ControladorEstado ce= new ControladorEstado();
    
    public PracticaIA_1View(SingleFrameApplication app) {
        super(app);

        initComponents();
        //inicializar();
        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
        inicializar();
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = PracticaIA_1App.getApplication().getMainFrame();
            aboutBox = new PracticaIA_1AboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        PracticaIA_1App.getApplication().show(aboutBox);
    }
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        javax.swing.JTabbedPane TabMaster = new javax.swing.JTabbedPane();
        PanelInicializar = new javax.swing.JPanel();
        ctrlConsistencia = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ctrlListaGasolineras = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        ctrlListaDepositos = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        lblXMaxima = new javax.swing.JLabel();
        ctrlDepositos = new javax.swing.JTextField();
        panelParametrosSimulated = new javax.swing.JPanel();
        lblTemperatura = new javax.swing.JLabel();
        lblIteraciones = new javax.swing.JLabel();
        ctrlGrado = new javax.swing.JTextField();
        ctrlIteracion = new javax.swing.JTextField();
        lblK = new javax.swing.JLabel();
        lblL = new javax.swing.JLabel();
        ctrlK = new javax.swing.JTextField();
        ctrlL = new javax.swing.JTextField();
        lblDepositos = new javax.swing.JLabel();
        ctrlNumeroPeticiones = new javax.swing.JTextField();
        ctrlXMaxima = new javax.swing.JTextField();
        ctrlYMaxima = new javax.swing.JTextField();
        lblYmaxima = new javax.swing.JLabel();
        lblNumeroPeticiones = new javax.swing.JLabel();
        lblViajesFijos = new javax.swing.JLabel();
        lbllKmFijos = new javax.swing.JLabel();
        ctrlViaje = new javax.swing.JTextField();
        ctrlKm = new javax.swing.JTextField();
        lblListaGasolineras = new javax.swing.JLabel();
        lblListaDepositos = new javax.swing.JLabel();
        ctrlAleatorio = new javax.swing.JButton();
        ctrlExportar = new javax.swing.JButton();
        ctrlImportar = new javax.swing.JButton();
        PanelGeneracion = new javax.swing.JPanel();
        ctrlGenAleatoria = new javax.swing.JRadioButton();
        ctrlGenGreedy = new javax.swing.JRadioButton();
        ctrlCrearEstadoInicial = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ctrlEstadoInicialInf = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        ctrlEstadoInicial = new javax.swing.JTable();
        conGenBuenGreedy = new javax.swing.JRadioButton();
        ctrlGenVacio = new javax.swing.JRadioButton();
        ctrlTiempoIni = new javax.swing.JLabel();
        ctrlTiempoTemp = new javax.swing.JLabel();
        PanelDistancias = new javax.swing.JPanel();
        dibujo = new java.awt.Canvas();
        ctrlDibujarEstadoInicial = new javax.swing.JButton();
        X0 = new javax.swing.JLabel();
        Y0 = new javax.swing.JLabel();
        X1 = new javax.swing.JLabel();
        X2 = new javax.swing.JLabel();
        X3 = new javax.swing.JLabel();
        Y1 = new javax.swing.JLabel();
        Y2 = new javax.swing.JLabel();
        Y3 = new javax.swing.JLabel();
        YKm = new javax.swing.JLabel();
        XKm = new javax.swing.JLabel();
        optEI = new javax.swing.JRadioButton();
        optEF = new javax.swing.JRadioButton();
        ctrlLey1 = new javax.swing.JLabel();
        ctrlLey2 = new javax.swing.JLabel();
        ctrlLey3 = new javax.swing.JLabel();
        ctrlLey4 = new javax.swing.JLabel();
        ctrlLey5 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        ctrlRutas = new javax.swing.JButton();
        tabFinal = new javax.swing.JPanel();
        ctrlHill = new javax.swing.JButton();
        ctrlAnnealing = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        ctrlPasos = new javax.swing.JTextArea();
        optHeu1 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        ctrlTiempo = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        ctrlGeneracion = new javax.swing.ButtonGroup();
        ctrlGrafico = new javax.swing.ButtonGroup();
        ctrlHeu = new javax.swing.ButtonGroup();

        mainPanel.setName("mainPanel"); // NOI18N

        TabMaster.setName("TabMaster"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(IA.Gasolineras.PracticaIA_1App.class).getContext().getResourceMap(PracticaIA_1View.class);
        PanelInicializar.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("PanelInicializar.border.title"))); // NOI18N
        PanelInicializar.setName("PanelInicializar"); // NOI18N

        ctrlConsistencia.setText(resourceMap.getString("ctrlConsistencia.text")); // NOI18N
        ctrlConsistencia.setName("ctrlConsistencia"); // NOI18N
        ctrlConsistencia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ctrlConsistenciaMouseClicked(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        ctrlListaGasolineras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Identificador", "Posición X", "Posición Y", "Prioridad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ctrlListaGasolineras.setName("ctrlListaGasolineras"); // NOI18N
        jScrollPane1.setViewportView(ctrlListaGasolineras);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        ctrlListaDepositos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Identificador", "Posición X", "Posició Y", "Viajes Máx", "Km Máx"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ctrlListaDepositos.setName("ctrlListaDepositos"); // NOI18N
        jScrollPane2.setViewportView(ctrlListaDepositos);

        jPanel1.setName("jPanel1"); // NOI18N

        lblXMaxima.setText(resourceMap.getString("lblXMaxima.text")); // NOI18N
        lblXMaxima.setName("lblXMaxima"); // NOI18N

        ctrlDepositos.setText(resourceMap.getString("ctrlDepositos.text")); // NOI18N
        ctrlDepositos.setName("ctrlDepositos"); // NOI18N

        panelParametrosSimulated.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("panelParametrosSimulated.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("panelParametrosSimulated.border.titleFont"))); // NOI18N
        panelParametrosSimulated.setName("panelParametrosSimulated"); // NOI18N

        lblTemperatura.setText(resourceMap.getString("lblTemperatura.text")); // NOI18N
        lblTemperatura.setName("lblTemperatura"); // NOI18N

        lblIteraciones.setText(resourceMap.getString("lblIteraciones.text")); // NOI18N
        lblIteraciones.setName("lblIteraciones"); // NOI18N

        ctrlGrado.setText(resourceMap.getString("ctrlGrado.text")); // NOI18N
        ctrlGrado.setName("ctrlGrado"); // NOI18N

        ctrlIteracion.setText(resourceMap.getString("ctrlIteracion.text")); // NOI18N
        ctrlIteracion.setName("ctrlIteracion"); // NOI18N

        lblK.setText(resourceMap.getString("lblK.text")); // NOI18N
        lblK.setName("lblK"); // NOI18N

        lblL.setText(resourceMap.getString("lblL.text")); // NOI18N
        lblL.setName("lblL"); // NOI18N

        ctrlK.setText(resourceMap.getString("ctrlK.text")); // NOI18N
        ctrlK.setName("ctrlK"); // NOI18N

        ctrlL.setText(resourceMap.getString("ctrlL.text")); // NOI18N
        ctrlL.setName("ctrlL"); // NOI18N

        javax.swing.GroupLayout panelParametrosSimulatedLayout = new javax.swing.GroupLayout(panelParametrosSimulated);
        panelParametrosSimulated.setLayout(panelParametrosSimulatedLayout);
        panelParametrosSimulatedLayout.setHorizontalGroup(
            panelParametrosSimulatedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelParametrosSimulatedLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelParametrosSimulatedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblIteraciones)
                    .addComponent(lblTemperatura)
                    .addComponent(lblL)
                    .addComponent(lblK))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelParametrosSimulatedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ctrlK)
                    .addComponent(ctrlL)
                    .addComponent(ctrlGrado, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                    .addComponent(ctrlIteracion, 0, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelParametrosSimulatedLayout.setVerticalGroup(
            panelParametrosSimulatedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelParametrosSimulatedLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelParametrosSimulatedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ctrlGrado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTemperatura))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelParametrosSimulatedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ctrlIteracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIteraciones))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelParametrosSimulatedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblK)
                    .addComponent(ctrlK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelParametrosSimulatedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblL)
                    .addComponent(ctrlL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        lblDepositos.setText(resourceMap.getString("lblDepositos.text")); // NOI18N
        lblDepositos.setName("lblDepositos"); // NOI18N

        ctrlNumeroPeticiones.setText(resourceMap.getString("ctrlNumeroPeticiones.text")); // NOI18N
        ctrlNumeroPeticiones.setName("ctrlNumeroPeticiones"); // NOI18N

        ctrlXMaxima.setText(resourceMap.getString("ctrlXMaxima.text")); // NOI18N
        ctrlXMaxima.setName("ctrlXMaxima"); // NOI18N

        ctrlYMaxima.setText(resourceMap.getString("ctrlYMaxima.text")); // NOI18N
        ctrlYMaxima.setName("ctrlYMaxima"); // NOI18N

        lblYmaxima.setText(resourceMap.getString("lblYmaxima.text")); // NOI18N
        lblYmaxima.setName("lblYmaxima"); // NOI18N

        lblNumeroPeticiones.setText(resourceMap.getString("lblNumeroPeticiones.text")); // NOI18N
        lblNumeroPeticiones.setName("lblNumeroPeticiones"); // NOI18N

        lblViajesFijos.setText(resourceMap.getString("lblViajesFijos.text")); // NOI18N
        lblViajesFijos.setName("lblViajesFijos"); // NOI18N

        lbllKmFijos.setText(resourceMap.getString("lbllKmFijos.text")); // NOI18N
        lbllKmFijos.setName("lbllKmFijos"); // NOI18N

        ctrlViaje.setText(resourceMap.getString("ctrlViaje.text")); // NOI18N
        ctrlViaje.setName("ctrlViaje"); // NOI18N

        ctrlKm.setText(resourceMap.getString("ctrlKm.text")); // NOI18N
        ctrlKm.setName("ctrlKm"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelParametrosSimulated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblYmaxima)
                                    .addComponent(lblXMaxima)
                                    .addComponent(lblDepositos)
                                    .addComponent(lblViajesFijos)
                                    .addComponent(lbllKmFijos))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addComponent(lblNumeroPeticiones))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ctrlYMaxima)
                            .addComponent(ctrlXMaxima)
                            .addComponent(ctrlDepositos)
                            .addComponent(ctrlNumeroPeticiones, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                            .addComponent(ctrlViaje)
                            .addComponent(ctrlKm))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ctrlNumeroPeticiones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNumeroPeticiones))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ctrlDepositos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDepositos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ctrlXMaxima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblXMaxima))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ctrlYMaxima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblYmaxima))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblViajesFijos)
                    .addComponent(ctrlViaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbllKmFijos)
                    .addComponent(ctrlKm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelParametrosSimulated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelParametrosSimulated.getAccessibleContext().setAccessibleName(resourceMap.getString("panelParametrosSimulated.AccessibleContext.accessibleName")); // NOI18N

        lblListaGasolineras.setText(resourceMap.getString("lblListaGasolineras.text")); // NOI18N
        lblListaGasolineras.setName("lblListaGasolineras"); // NOI18N

        lblListaDepositos.setText(resourceMap.getString("lblListaDepositos.text")); // NOI18N
        lblListaDepositos.setName("lblListaDepositos"); // NOI18N

        ctrlAleatorio.setActionCommand(resourceMap.getString("ctrlAleatorio.actionCommand")); // NOI18N
        ctrlAleatorio.setLabel(resourceMap.getString("ctrlAleatorio.label")); // NOI18N
        ctrlAleatorio.setName("ctrlAleatorio"); // NOI18N
        ctrlAleatorio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ctrlAleatorioMouseClicked(evt);
            }
        });

        ctrlExportar.setText(resourceMap.getString("ctrlExportar.text")); // NOI18N
        ctrlExportar.setName("ctrlExportar"); // NOI18N
        ctrlExportar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ctrlExportarMouseClicked(evt);
            }
        });

        ctrlImportar.setText(resourceMap.getString("ctrlImportar.text")); // NOI18N
        ctrlImportar.setName("ctrlImportar"); // NOI18N
        ctrlImportar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ctrlImportarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout PanelInicializarLayout = new javax.swing.GroupLayout(PanelInicializar);
        PanelInicializar.setLayout(PanelInicializarLayout);
        PanelInicializarLayout.setHorizontalGroup(
            PanelInicializarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelInicializarLayout.createSequentialGroup()
                .addGroup(PanelInicializarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelInicializarLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(PanelInicializarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ctrlAleatorio)
                            .addComponent(ctrlExportar)
                            .addComponent(ctrlImportar)))
                    .addGroup(PanelInicializarLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelInicializarLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ctrlConsistencia)))
                .addGap(17, 17, 17)
                .addGroup(PanelInicializarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(PanelInicializarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(PanelInicializarLayout.createSequentialGroup()
                            .addGroup(PanelInicializarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblListaDepositos)
                                .addComponent(lblListaGasolineras))
                            .addGap(260, 260, 260))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        PanelInicializarLayout.setVerticalGroup(
            PanelInicializarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelInicializarLayout.createSequentialGroup()
                .addGroup(PanelInicializarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelInicializarLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblListaGasolineras)
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblListaDepositos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelInicializarLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ctrlAleatorio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ctrlConsistencia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ctrlExportar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ctrlImportar)
                        .addGap(20, 20, 20)))
                .addContainerGap())
        );

        ctrlAleatorio.getAccessibleContext().setAccessibleName(resourceMap.getString("ctrlAleatorio.AccessibleContext.accessibleName")); // NOI18N

        TabMaster.addTab(resourceMap.getString("PanelInicializar.TabConstraints.tabTitle"), PanelInicializar); // NOI18N

        PanelGeneracion.setName("PanelGeneracion"); // NOI18N

        ctrlGenAleatoria.setText(resourceMap.getString("ctrlGenAleatoria.text")); // NOI18N
        ctrlGenAleatoria.setToolTipText(resourceMap.getString("ctrlGenAleatoria.toolTipText")); // NOI18N
        ctrlGenAleatoria.setName("ctrlGenAleatoria"); // NOI18N

        ctrlGenGreedy.setText(resourceMap.getString("ctrlGenGreedy.text")); // NOI18N
        ctrlGenGreedy.setToolTipText(resourceMap.getString("ctrlGenGreedy.toolTipText")); // NOI18N
        ctrlGenGreedy.setName("ctrlGenGreedy"); // NOI18N

        ctrlCrearEstadoInicial.setText(resourceMap.getString("ctrlCrearEstadoInicial.text")); // NOI18N
        ctrlCrearEstadoInicial.setName("ctrlCrearEstadoInicial"); // NOI18N
        ctrlCrearEstadoInicial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ctrlCrearEstadoInicialMouseClicked(evt);
            }
        });

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        ctrlEstadoInicialInf.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Deposito", "Km Max.", "Km quedan", "Via Max", "Via quedan"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ctrlEstadoInicialInf.setName("ctrlEstadoInicialInf"); // NOI18N
        jScrollPane3.setViewportView(ctrlEstadoInicialInf);

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        ctrlEstadoInicial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Gasolinera", "Deposito"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ctrlEstadoInicial.setName("ctrlEstadoInicial"); // NOI18N
        jScrollPane4.setViewportView(ctrlEstadoInicial);

        conGenBuenGreedy.setSelected(true);
        conGenBuenGreedy.setText(resourceMap.getString("conGenBuenGreedy.text")); // NOI18N
        conGenBuenGreedy.setToolTipText(resourceMap.getString("conGenBuenGreedy.toolTipText")); // NOI18N
        conGenBuenGreedy.setName("conGenBuenGreedy"); // NOI18N

        ctrlGenVacio.setText(resourceMap.getString("ctrlGenVacio.text")); // NOI18N
        ctrlGenVacio.setName("ctrlGenVacio"); // NOI18N

        ctrlTiempoIni.setForeground(resourceMap.getColor("ctrlTiempoIni.foreground")); // NOI18N
        ctrlTiempoIni.setText(resourceMap.getString("ctrlTiempoIni.text")); // NOI18N
        ctrlTiempoIni.setName("ctrlTiempoIni"); // NOI18N

        ctrlTiempoTemp.setForeground(resourceMap.getColor("ctrlTiempoTemp.foreground")); // NOI18N
        ctrlTiempoTemp.setName("ctrlTiempoTemp"); // NOI18N

        javax.swing.GroupLayout PanelGeneracionLayout = new javax.swing.GroupLayout(PanelGeneracion);
        PanelGeneracion.setLayout(PanelGeneracionLayout);
        PanelGeneracionLayout.setHorizontalGroup(
            PanelGeneracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelGeneracionLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(PanelGeneracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ctrlGenGreedy)
                    .addGroup(PanelGeneracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(PanelGeneracionLayout.createSequentialGroup()
                            .addComponent(conGenBuenGreedy)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                        .addGroup(PanelGeneracionLayout.createSequentialGroup()
                            .addGroup(PanelGeneracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ctrlTiempoIni, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ctrlCrearEstadoInicial)
                                .addComponent(ctrlTiempoTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(34, 34, 34)))
                    .addComponent(ctrlGenAleatoria)
                    .addComponent(ctrlGenVacio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87))
        );
        PanelGeneracionLayout.setVerticalGroup(
            PanelGeneracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelGeneracionLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(PanelGeneracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(PanelGeneracionLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(ctrlGenVacio)
                        .addGap(18, 18, 18)
                        .addComponent(ctrlGenAleatoria)
                        .addGap(18, 18, 18)
                        .addComponent(ctrlGenGreedy)
                        .addGap(18, 18, 18)
                        .addComponent(conGenBuenGreedy)
                        .addGap(40, 40, 40)
                        .addComponent(ctrlCrearEstadoInicial)
                        .addGap(61, 61, 61)
                        .addComponent(ctrlTiempoTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ctrlTiempoIni, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(131, 131, 131))
        );

        TabMaster.addTab(resourceMap.getString("PanelGeneracion.TabConstraints.tabTitle"), PanelGeneracion); // NOI18N

        PanelDistancias.setName("PanelDistancias"); // NOI18N

        dibujo.setBackground(resourceMap.getColor("dibujo.background")); // NOI18N
        dibujo.setName("dibujo"); // NOI18N
        dibujo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dibujoMouseClicked(evt);
            }
        });

        ctrlDibujarEstadoInicial.setText(resourceMap.getString("ctrlDibujarEstadoInicial.text")); // NOI18N
        ctrlDibujarEstadoInicial.setName("ctrlDibujarEstadoInicial"); // NOI18N
        ctrlDibujarEstadoInicial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ctrlDibujarEstadoInicialMouseClicked(evt);
            }
        });

        X0.setText(resourceMap.getString("X0.text")); // NOI18N
        X0.setName("X0"); // NOI18N

        Y0.setText(resourceMap.getString("Y0.text")); // NOI18N
        Y0.setName("Y0"); // NOI18N

        X1.setText(resourceMap.getString("X1.text")); // NOI18N
        X1.setName("X1"); // NOI18N

        X2.setText(resourceMap.getString("X2.text")); // NOI18N
        X2.setName("X2"); // NOI18N

        X3.setText(resourceMap.getString("X3.text")); // NOI18N
        X3.setName("X3"); // NOI18N

        Y1.setText(resourceMap.getString("Y1.text")); // NOI18N
        Y1.setName("Y1"); // NOI18N

        Y2.setText(resourceMap.getString("Y2.text")); // NOI18N
        Y2.setName("Y2"); // NOI18N

        Y3.setText(resourceMap.getString("Y3.text")); // NOI18N
        Y3.setName("Y3"); // NOI18N

        YKm.setText(resourceMap.getString("YKm.text")); // NOI18N
        YKm.setName("YKm"); // NOI18N

        XKm.setText(resourceMap.getString("XKm.text")); // NOI18N
        XKm.setName("XKm"); // NOI18N

        optEI.setSelected(true);
        optEI.setText(resourceMap.getString("optEI.text")); // NOI18N
        optEI.setName("optEI"); // NOI18N

        optEF.setText(resourceMap.getString("optEF.text")); // NOI18N
        optEF.setName("optEF"); // NOI18N

        ctrlLey1.setForeground(resourceMap.getColor("ctrlLey1.foreground")); // NOI18N
        ctrlLey1.setText(resourceMap.getString("ctrlLey1.text")); // NOI18N
        ctrlLey1.setName("ctrlLey1"); // NOI18N

        ctrlLey2.setBackground(resourceMap.getColor("ctrlLey2.background")); // NOI18N
        ctrlLey2.setForeground(resourceMap.getColor("ctrlLey2.foreground")); // NOI18N
        ctrlLey2.setText(resourceMap.getString("ctrlLey2.text")); // NOI18N
        ctrlLey2.setName("ctrlLey2"); // NOI18N
        ctrlLey2.setOpaque(true);

        ctrlLey3.setBackground(resourceMap.getColor("ctrlLey3.background")); // NOI18N
        ctrlLey3.setForeground(resourceMap.getColor("ctrlLey3.foreground")); // NOI18N
        ctrlLey3.setText(resourceMap.getString("ctrlLey3.text")); // NOI18N
        ctrlLey3.setName("ctrlLey3"); // NOI18N
        ctrlLey3.setOpaque(true);

        ctrlLey4.setForeground(resourceMap.getColor("ctrlLey4.foreground")); // NOI18N
        ctrlLey4.setText(resourceMap.getString("ctrlLey4.text")); // NOI18N
        ctrlLey4.setName("ctrlLey4"); // NOI18N

        ctrlLey5.setText(resourceMap.getString("ctrlLey5.text")); // NOI18N
        ctrlLey5.setName("ctrlLey5"); // NOI18N

        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane5.setName("jScrollPane5"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setFont(resourceMap.getFont("jTextArea1.font")); // NOI18N
        jTextArea1.setRows(3);
        jTextArea1.setText(resourceMap.getString("jTextArea1.text")); // NOI18N
        jTextArea1.setName("jTextArea1"); // NOI18N
        jTextArea1.setRequestFocusEnabled(false);
        jScrollPane5.setViewportView(jTextArea1);

        ctrlRutas.setText(resourceMap.getString("ctrlRutas.text")); // NOI18N
        ctrlRutas.setName("ctrlRutas"); // NOI18N
        ctrlRutas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ctrlRutasMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout PanelDistanciasLayout = new javax.swing.GroupLayout(PanelDistancias);
        PanelDistancias.setLayout(PanelDistanciasLayout);
        PanelDistanciasLayout.setHorizontalGroup(
            PanelDistanciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelDistanciasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelDistanciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelDistanciasLayout.createSequentialGroup()
                        .addGroup(PanelDistanciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Y0)
                            .addComponent(Y1)
                            .addComponent(Y3)
                            .addComponent(Y2))
                        .addGap(14, 14, 14)
                        .addGroup(PanelDistanciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dibujo, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PanelDistanciasLayout.createSequentialGroup()
                                .addComponent(X0)
                                .addGap(174, 174, 174)
                                .addComponent(X1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(X2)
                                .addGap(160, 160, 160)
                                .addComponent(X3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelDistanciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelDistanciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(ctrlLey3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ctrlLey1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(XKm, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ctrlLey2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ctrlLey5, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGroup(PanelDistanciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                .addComponent(ctrlRutas, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(ctrlLey4, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)))
                    .addGroup(PanelDistanciasLayout.createSequentialGroup()
                        .addComponent(YKm)
                        .addGap(32, 32, 32)
                        .addComponent(optEI)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(optEF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 287, Short.MAX_VALUE)
                        .addComponent(ctrlDibujarEstadoInicial)
                        .addGap(53, 53, 53)))
                .addGap(172, 172, 172))
        );
        PanelDistanciasLayout.setVerticalGroup(
            PanelDistanciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelDistanciasLayout.createSequentialGroup()
                .addGroup(PanelDistanciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelDistanciasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PanelDistanciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(PanelDistanciasLayout.createSequentialGroup()
                                .addGroup(PanelDistanciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(optEI)
                                    .addComponent(optEF)
                                    .addComponent(ctrlDibujarEstadoInicial))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addComponent(YKm))
                        .addGroup(PanelDistanciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(PanelDistanciasLayout.createSequentialGroup()
                                .addComponent(Y3)
                                .addGap(7, 7, 7)
                                .addComponent(ctrlLey1)
                                .addGap(18, 18, 18)
                                .addComponent(ctrlLey2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ctrlLey3)
                                .addGap(12, 12, 12)
                                .addGroup(PanelDistanciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PanelDistanciasLayout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addComponent(Y2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Y1)
                                        .addGap(110, 110, 110)
                                        .addComponent(Y0))
                                    .addGroup(PanelDistanciasLayout.createSequentialGroup()
                                        .addGap(35, 35, 35)
                                        .addComponent(ctrlLey5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(16, 16, 16)
                                        .addComponent(ctrlRutas))))
                            .addComponent(dibujo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelDistanciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelDistanciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(X0)
                                .addComponent(X3)
                                .addComponent(XKm))
                            .addComponent(X2)
                            .addComponent(X1)))
                    .addGroup(PanelDistanciasLayout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(ctrlLey4)))
                .addContainerGap(115, Short.MAX_VALUE))
        );

        TabMaster.addTab(resourceMap.getString("PanelDistancias.TabConstraints.tabTitle"), PanelDistancias); // NOI18N

        tabFinal.setName("tabFinal"); // NOI18N

        ctrlHill.setText(resourceMap.getString("ctrlHill.text")); // NOI18N
        ctrlHill.setName("ctrlHill"); // NOI18N
        ctrlHill.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ctrlHillMouseClicked(evt);
            }
        });

        ctrlAnnealing.setText(resourceMap.getString("ctrlAnnealing.text")); // NOI18N
        ctrlAnnealing.setName("ctrlAnnealing"); // NOI18N
        ctrlAnnealing.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ctrlAnnealingMouseClicked(evt);
            }
        });

        jScrollPane6.setName("jScrollPane6"); // NOI18N

        ctrlPasos.setColumns(20);
        ctrlPasos.setRows(5);
        ctrlPasos.setName("ctrlPasos"); // NOI18N
        jScrollPane6.setViewportView(ctrlPasos);

        optHeu1.setSelected(true);
        optHeu1.setText(resourceMap.getString("optHeu1.text")); // NOI18N
        optHeu1.setActionCommand(resourceMap.getString("optHeu1.actionCommand")); // NOI18N
        optHeu1.setName("optHeu1"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        ctrlTiempo.setText(resourceMap.getString("ctrlTiempo.text")); // NOI18N
        ctrlTiempo.setName("ctrlTiempo"); // NOI18N

        javax.swing.GroupLayout tabFinalLayout = new javax.swing.GroupLayout(tabFinal);
        tabFinal.setLayout(tabFinalLayout);
        tabFinalLayout.setHorizontalGroup(
            tabFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabFinalLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(tabFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ctrlAnnealing)
                    .addComponent(ctrlHill)
                    .addComponent(optHeu1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ctrlTiempo, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );
        tabFinalLayout.setVerticalGroup(
            tabFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabFinalLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(tabFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tabFinalLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(optHeu1)
                        .addGap(66, 66, 66)
                        .addComponent(ctrlTiempo)
                        .addGap(52, 52, 52)
                        .addComponent(ctrlHill)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ctrlAnnealing)))
                .addContainerGap(136, Short.MAX_VALUE))
        );

        TabMaster.addTab(resourceMap.getString("tabFinal.TabConstraints.tabTitle"), tabFinal); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TabMaster, javax.swing.GroupLayout.DEFAULT_SIZE, 766, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(TabMaster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(IA.Gasolineras.PracticaIA_1App.class).getContext().getActionMap(PracticaIA_1View.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setToolTipText(resourceMap.getString("exitMenuItem.toolTipText")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 790, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 606, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void ctrlImportarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ctrlImportarMouseClicked
        try {
            String path="";
            String sCadena="";
            path=loadFile(new Frame(), "Abrir...", ".\\", "*.txt");
            
            javax.swing.table.DefaultTableModel model1;
            javax.swing.table.DefaultTableModel model2;
            model1=(javax.swing.table.DefaultTableModel)this.ctrlListaGasolineras.getModel();
            model2=(javax.swing.table.DefaultTableModel)this.ctrlListaDepositos.getModel();
            
            FileReader fr = new FileReader(path);
            BufferedReader bf = new BufferedReader(fr);
            String[] linea;
            int x=0;
            int y=0;
            while ((sCadena = bf.readLine())!=null) {
                linea=sCadena.split(":");
                switch (Integer.parseInt(linea[0])) {
                    case 1:
                        //NUMGASOLINERAS;
                        ctrlNumeroPeticiones.setText(linea[2]);
                        model1.setRowCount(Integer.parseInt(ctrlNumeroPeticiones.getText()));
                        break;
                    case 2:
                        //NUMCAMIONES;
                        ctrlDepositos.setText(linea[2]);
                        model2.setRowCount(Integer.parseInt(ctrlDepositos.getText()));
                        break;
                    case 3:
                        //XMAXIMA;
                        ctrlXMaxima.setText(linea[2]);
                        break;
                    case 4:
                        //YMAXIMA;
                        ctrlYMaxima.setText(linea[2]);
                        break;
                    case 5:
                        //GRADOS;
                        ctrlGrado.setText(linea[2]);
                        break;
                    case 6:
                        //ITERACIONES;
                        ctrlIteracion.setText(linea[2]);
                        break;
                    case 7:
                        //GASOLINERA;
                        model1.setValueAt(linea[2],x,0);
                        model1.setValueAt(Integer.parseInt(linea[3]),x,1);
                        model1.setValueAt(Integer.parseInt(linea[4]),x,2);
                        model1.setValueAt(Integer.parseInt(linea[5]),x,3);
                        x++;
                        break;
                    case 8:
                        //DEPOSITO;
                        model2.setValueAt(linea[2],y,0);
                        model2.setValueAt(Integer.parseInt(linea[3]),y,1);
                        model2.setValueAt(Integer.parseInt(linea[4]),y,2);
                        model2.setValueAt(Integer.parseInt(linea[5]),y,3);
                        model2.setValueAt(Integer.parseInt(linea[6]),y,4);
                        y++;
                        break;
                    case 9:
                        //ITERACIONES;
                        ctrlK.setText(linea[2]);
                        break;
                    case 10:
                        //ITERACIONES;
                        ctrlL.setText(linea[2]);
                        break;
                    default:
                        //Sentencia o bloque por defecto;
                }
            }
            
            JOptionPane.showMessageDialog(null, "Estructura de datos importada de forma correcta", "Importar de fichero", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Existen problemas a la hora de importar la estructura de datos","Importar de fichero", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ctrlImportarMouseClicked

    private void ctrlExportarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ctrlExportarMouseClicked
        try {
            String path="";
            String linea="";
            path=saveFile(new Frame(), "Grabar ...", ".\\", "*.txt");
            
            javax.swing.table.DefaultTableModel model1;
            javax.swing.table.DefaultTableModel model2;
            model1=(javax.swing.table.DefaultTableModel)this.ctrlListaGasolineras.getModel();
            model2=(javax.swing.table.DefaultTableModel)this.ctrlListaDepositos.getModel();
            
            int maxLineas;
            
            File textFile = new File(path);
            FileWriter textOut;
            textOut = new FileWriter(textFile);
            textOut.write("1:NUMGASOLINERAS:" + this.ctrlNumeroPeticiones.getText() + "\n");
            textOut.write("2:NUMCAMIONES:" + this.ctrlDepositos.getText() + "\n");
            textOut.write("3:XMAXIMA:" + this.ctrlXMaxima.getText() + "\n");
            textOut.write("4:YMAXIMA:" + this.ctrlYMaxima.getText() + "\n");
            textOut.write("5:GRADOS:" + this.ctrlGrado.getText() + "\n");
            textOut.write("6:ITERACIONES:" + this.ctrlIteracion.getText() + "\n");
            textOut.write("9:K:" + this.ctrlK.getText() + "\n");
            textOut.write("10:BETA:" + this.ctrlL.getText() + "\n");
            maxLineas=model1.getRowCount();
            for (int x = 0; x < maxLineas; x++ ) {
                linea="7:GASOLINERA:" + model1.getValueAt(x, 0).toString() + ":" + model1.getValueAt(x, 1).toString() + ":" +
                        model1.getValueAt(x, 2).toString() +":"+model1.getValueAt(x, 3).toString() + "\n";
                textOut.write(linea);
            }
            maxLineas=model2.getRowCount();
            for (int x = 0; x < maxLineas; x++ ) {
                linea="8:DEPOSITO:" + model2.getValueAt(x, 0).toString() + ":" + model2.getValueAt(x, 1).toString() + ":" +
                        model2.getValueAt(x, 2).toString() +":"+model2.getValueAt(x, 3).toString() + ":" +
                        model2.getValueAt(x, 4).toString() + "\n";
                textOut.write(linea);
            }
            
            textOut.close();
            JOptionPane.showMessageDialog(null, "Estructura de datos guardado de forma correcta", "Exportar a fichero", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Existen problemas a la hora de exportar la estructura de datos","Exportar a fichero", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ctrlExportarMouseClicked

    private void ctrlAleatorioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ctrlAleatorioMouseClicked
        
        
        
        // TODO add your handling code here:
        Random r;
        r=new Random();
        r.setSeed(new Date().getTime());
        
        
        ctrlNumeroPeticiones.setText(rellenarAleatorio(ctrlNumeroPeticiones.getText(),350,60,r));
        ctrlDepositos.setText(rellenarAleatorio(ctrlDepositos.getText(),50,1,r));
        ctrlXMaxima.setText(rellenarAleatorio(ctrlXMaxima.getText(),100,1,r));
        ctrlYMaxima.setText(rellenarAleatorio(ctrlYMaxima.getText(),100,1,r));
        ctrlGrado.setText(rellenarAleatorio(ctrlGrado.getText(),500,1,r));
        ctrlIteracion.setText(rellenarAleatorio(ctrlIteracion.getText(),300,1,r));
        //ctrlK.setText("10");
        //ctrlL.setText("0.001");
        
        int gasolineras=Integer.parseInt(ctrlNumeroPeticiones.getText());
        int depositos=Integer.parseInt(ctrlDepositos.getText());
        int xMax=Integer.parseInt(ctrlXMaxima.getText());
        int yMax=Integer.parseInt(ctrlYMaxima.getText());
        int viajes=0;
        int km=0;
        //int grado=Integer.parseInt(ctrlGrado.getText());
        //int iteracion=Integer.parseInt(ctrlIteracion.getText());
        
        float numViajesMax=(float)gasolineras/(float)depositos;
        int numMaxKm=(yMax+xMax)*2;
        
        //Llenar los depositos
        javax.swing.table.DefaultTableModel model1=(javax.swing.table.DefaultTableModel)this.ctrlListaDepositos.getModel();
        model1.setRowCount(depositos);
        
        for (int x = 0; x < depositos; x++ ) {
            if (!this.ctrlViaje.getText().trim().isEmpty())
            {viajes=Integer.parseInt(ctrlViaje.getText());
            }else{viajes=r.nextInt((int)numViajesMax)+1;}

            if (!this.ctrlKm.getText().trim().isEmpty())
            {km=Integer.parseInt(ctrlKm.getText());
            }else{km=r.nextInt(numMaxKm)+1;}

            model1.setValueAt("Dep."+String.valueOf(x),x,0);
            model1.setValueAt(r.nextInt(xMax),x,1);
            model1.setValueAt(r.nextInt(yMax),x,2);
            model1.setValueAt(viajes,x,3);
            model1.setValueAt(km,x,4);
//            model1.setValueAt(r.nextInt((int)(numViajesMax)+1)+1,x,3);
//            model1.setValueAt(r.nextInt(numMaxKm)+1,x,4);
        }
        
        //Llenar las gasolineras
        javax.swing.table.DefaultTableModel model2=(javax.swing.table.DefaultTableModel)this.ctrlListaGasolineras.getModel();
        model2.setRowCount(gasolineras);
        
        for (int y = 0; y < gasolineras; y++ ) {
            model2.setValueAt("Gas."+String.valueOf(y),y,0);
            model2.setValueAt(r.nextInt(xMax),y,1);
            model2.setValueAt(r.nextInt(yMax),y,2);
            model2.setValueAt(r.nextInt(3)+1,y,3);
        }
    }//GEN-LAST:event_ctrlAleatorioMouseClicked

    private void ctrlConsistenciaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ctrlConsistenciaMouseClicked
        javax.swing.table.DefaultTableModel model1;
        javax.swing.table.DefaultTableModel model2;
        int gasolineras=Integer.parseInt(ctrlNumeroPeticiones.getText());
        int depositos=Integer.parseInt(ctrlDepositos.getText());
        //comprobar consistencia
        int iV=gasolineras+depositos;
        int a[][] = new int[iV][2];
        String sError="";
        boolean bComprobar=true;
        
        model1=(javax.swing.table.DefaultTableModel)this.ctrlListaGasolineras.getModel();
        int valor1;
        int valor2;
        int prioridad;
        int numViajes;
        int numKm;
        for (int x = 0; x < gasolineras; x++ ) {
            if (((Integer)model1.getValueAt(x,1) == null) || ((Integer)model1.getValueAt(x,2) == null)) {
                //|| (Integer.parseInt(model1.getValueAt(x, 1).toString())<0)
                bComprobar=false;
                sError=sError + "La gasolinera " + x + " tiene una posición erronea.\n";
            }else {
                valor1=Integer.parseInt(model1.getValueAt(x, 1).toString());
                valor2=Integer.parseInt(model1.getValueAt(x, 2).toString());
                if ((valor1 <0) || (valor2<0)) {
                    bComprobar=false;
                    sError=sError + "La gasolinera " + x + " tiene una posición erronea.\n";
                }else{
                    a[x][0]=valor1;
                    a[x][1]=valor2;
                }
            }
            if ((Integer)model1.getValueAt(x,3) == null) {
                bComprobar=false;
                sError=sError + "La gasolinera " + x + " tiene una prioridad erronea.\n";
            }else {
                prioridad=Integer.parseInt(model1.getValueAt(x, 3).toString());
                if ((prioridad <1) || (prioridad>3)) {
                    bComprobar=false;
                    sError=sError + "La gasolinera " + x + " tiene una prioridad erronea.\n";
                }
            }
        }
        model2=(javax.swing.table.DefaultTableModel)this.ctrlListaDepositos.getModel();
        for (int x = 0; x < depositos; x++ ) {
            if (((Integer)model2.getValueAt(x,1) == null) || ((Integer)model2.getValueAt(x,2) == null)) {
                
                bComprobar=false;
                sError=sError + "El depósito " + x + " tiene una posición erronea.\n";
            }else{
                valor1=Integer.parseInt(model2.getValueAt(x, 1).toString());
                valor2=Integer.parseInt(model2.getValueAt(x, 2).toString());
                if ((valor1 <0) || (valor2<0)) {
                    bComprobar=false;
                    sError=sError + "El depósito " + x + " tiene una posición erronea.\n";
                }else {
                    a[gasolineras+x][0]=valor1;
                    a[gasolineras+x][1]=valor2;
                }
            }
            if ((Integer)model2.getValueAt(x,3) == null) {
                bComprobar=false;
                sError=sError + "El número de viajes del depósito " + x + " es erroneo.\n";
            }else {
                numViajes=Integer.parseInt(model2.getValueAt(x, 3).toString());
                if ((numViajes <1) ) {
                    bComprobar=false;
                    sError=sError + "El número de viajes del depósito " + x + " es erroneo.\n";
                }
            }
            if ((Integer)model2.getValueAt(x,4) == null) {
                bComprobar=false;
                sError=sError + "El número de kilómetros del depósito " + x + " es erroneo.\n";
            }else {
                numKm=Integer.parseInt(model2.getValueAt(x, 3).toString());
                if ((numKm <1)) {
                    bComprobar=false;
                    sError=sError + "El número de kilómetros del depósito " + x + " es erroneo.\n";
                }
            }
        }
        if (bComprobar==true) {
            boolean repetido=false;
            for (int x=0;x<iV-1;x++) {
                for (int y=x+1;y<iV;y++) {
                    if ((a[x][0]==a[y][0]) && (a[x][1]==a[y][1])) {
                        repetido=true;
                        if (y<gasolineras) {
                            //sError=sError + "La coordenada de la gasolinera " + y + " está repetida.\n";
                            //model1=(javax.swing.table.DefaultTableModel)this.ctrlListaGasolineras.getModel();
                            model1.setValueAt("",y,1);
                            model1.setValueAt("",y,2);
                        } else {
                            //sError=sError + "La coordenada del depósito " + (y-gasolineras) + " está repetida.\n";
                            //model2=(javax.swing.-table.DefaultTableModel)this.ctrlListaDepositos.getModel();
                            model2.setValueAt("",y-gasolineras,1);
                            model2.setValueAt("",y-gasolineras,2);
                        }
                        
                        
                    }
                }
            }
            if (repetido==true) {
                sError="Existen coordenadas repetidas";
                JOptionPane.showMessageDialog(null, sError, "Coordenadas duplicadas", JOptionPane.ERROR_MESSAGE);
            }else {
                JOptionPane.showMessageDialog(null, "No se repite ninguna coordenada para depositos y gasolineras.", "Coordenadas no duplicadas", JOptionPane.INFORMATION_MESSAGE);
            }
        }else {
            JOptionPane.showMessageDialog(null, sError, "Coordenadas erroneas", JOptionPane.ERROR_MESSAGE);}
    }//GEN-LAST:event_ctrlConsistenciaMouseClicked

    private void ctrlCrearEstadoInicialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ctrlCrearEstadoInicialMouseClicked
        //calculo el tiempo inicial
        double tiempoInicio = System.currentTimeMillis();

        crearTablasConsulta();
        
        
        javax.swing.table.DefaultTableModel model2;
        model2=(javax.swing.table.DefaultTableModel)this.ctrlListaDepositos.getModel();

        int gasolineras=Integer.parseInt(ctrlNumeroPeticiones.getText());
        int depositos=Integer.parseInt(ctrlDepositos.getText());

        ce.e = new estado(gasolineras,depositos,c);
        int totalkilometros=0;
        for (int x = 0; x < depositos; x++ )
        {
            ce.e.setNumViajes(x, (Integer)model2.getValueAt(x,3));
            ce.e.setNumKilometros(x, (Integer)model2.getValueAt(x,4));
            totalkilometros=totalkilometros+(Integer)model2.getValueAt(x,4);
        }
        ce.e.setTotalKm(totalkilometros);
        
        double tiempoFin = System.currentTimeMillis();
        //calculo el tiempo que tardó el método
        double tiempo = tiempoFin - tiempoInicio;
        this.ctrlTiempoTemp.setText("Tiempo temporal:" + String.valueOf(tiempo));
        
        tiempoInicio = System.currentTimeMillis();
        if (ctrlGenAleatoria.isSelected())
        {
            ce.crearEstadoInicial(c, 1);
        }else
        {
            if (ctrlGenGreedy.isSelected())
            {
                ce.crearEstadoInicial(c, 2);
            }else
            {
                if  (this.conGenBuenGreedy.isSelected()){
                    ce.crearEstadoInicial(c, 3);
                }
                else
                {}
            }
        }
         tiempoFin = System.currentTimeMillis();
        //calculo el tiempo que tardó el método
         tiempo = tiempoFin - tiempoInicio;
        this.ctrlTiempoIni.setText("Tiempo est. Inicial: " + String.valueOf(tiempo));
        
        javax.swing.table.DefaultTableModel modelEstadoInicial;
        javax.swing.table.DefaultTableModel modelEstadoInicialInf;
        modelEstadoInicial=(javax.swing.table.DefaultTableModel)this.ctrlEstadoInicial.getModel();
        modelEstadoInicialInf=(javax.swing.table.DefaultTableModel)this.ctrlEstadoInicialInf.getModel();

        mostrar_estado(ce.e,modelEstadoInicial,modelEstadoInicialInf,model2);
        
        
        
        
        
    }//GEN-LAST:event_ctrlCrearEstadoInicialMouseClicked

    private void ctrlDibujarEstadoInicialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ctrlDibujarEstadoInicialMouseClicked
        dibujar_Base();
        // TODO add your handling code here:
    }//GEN-LAST:event_ctrlDibujarEstadoInicialMouseClicked

    private void dibujoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dibujoMouseClicked
        dibujar_Base();
        int posX=evt.getX();
        int posY=400-evt.getY();
        if (optEI.isSelected())
        {dibujar_Estado(ce.e,posX,posY);}
        else
        {dibujar_Estado(ce.eFinal,posX,posY);}

        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_dibujoMouseClicked

    private void ctrlRutasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ctrlRutasMouseClicked
        dibujar_Base();
        if (optEI.isSelected())
        {dibujar_Todos_Estados(ce.e);}
        else
        {dibujar_Todos_Estados(ce.eFinal);}
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_ctrlRutasMouseClicked

    private void ctrlHillMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ctrlHillMouseClicked
        ce.e.setConsulta(c);
        double tiempoInicio = System.currentTimeMillis();        
        if (optHeu1.isSelected())
        {
            this.ctrlPasos.setText(ce.HillClimbingSearch(ce.e,1));
        }else
        {
            this.ctrlPasos.setText(ce.HillClimbingSearch(ce.e,2));
        }
        double tiempoFin = System.currentTimeMillis();
        //calculo el tiempo que tardó el método
        double tiempo = tiempoFin - tiempoInicio;
        this.ctrlTiempo.setText("Tiempo trascurrido:" + String.valueOf(tiempo));

       
        // TODO add your handling code here:
    }//GEN-LAST:event_ctrlHillMouseClicked

    private void ctrlAnnealingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ctrlAnnealingMouseClicked
        ce.e.setConsulta(c);
        int iteracion=Integer.parseInt(this.ctrlIteracion.getText());
        int grado=Integer.parseInt(this.ctrlGrado.getText());
        int K=Integer.parseInt(this.ctrlK.getText());
        float B=Float.parseFloat(this.ctrlL.getText());
        double tiempoInicio = System.currentTimeMillis();
        if (optHeu1.isSelected())
        {
        this.ctrlPasos.setText(ce.SimulatedAnnealing(ce.e,iteracion,grado,K,B,1));
        }else
        {
        this.ctrlPasos.setText(ce.SimulatedAnnealing(ce.e,iteracion,grado,K,B,2));
        }
        double tiempoFin = System.currentTimeMillis();
        //calculo el tiempo que tardó el método
        double tiempo = tiempoFin - tiempoInicio;
        this.ctrlTiempo.setText("Tiempo trascurrido:" + String.valueOf(tiempo));
    }//GEN-LAST:event_ctrlAnnealingMouseClicked

    // <editor-fold defaultstate="collapsed" desc="Private Functions">
    
    private void inicializar(){
    ctrlGeneracion.add(this.ctrlGenAleatoria);
    ctrlGeneracion.add(this.ctrlGenGreedy);
    ctrlGeneracion.add(conGenBuenGreedy);
    ctrlGeneracion.add(ctrlGenVacio);
    
    ctrlHeu.add(optHeu1);
    
    
    ctrlGrafico.add(this.optEI);
    ctrlGrafico.add(this.optEF);
    
    }
    private void dibujar_Todos_Estados(estado est){
        javax.swing.table.DefaultTableModel model1;
        javax.swing.table.DefaultTableModel model2;
        model1=(javax.swing.table.DefaultTableModel)this.ctrlListaGasolineras.getModel();
        model2=(javax.swing.table.DefaultTableModel)this.ctrlListaDepositos.getModel();

        int gasolineras=model1.getRowCount();
        int depositos=model2.getRowCount();

        int xMaxReal=Integer.parseInt(ctrlXMaxima.getText());
        int yMaxReal=Integer.parseInt(ctrlYMaxima.getText());
        
        int xMaxPantalla=550;
        int yMaxPantalla=400;
        
        float XNorm=(float)xMaxPantalla/(float)xMaxReal;
        float YNorm=(float)yMaxPantalla/(float)yMaxReal;
        
        Random r;
        r=new Random();
        r.setSeed(new Date().getTime());
        
         Graphics g = dibujo.getGraphics();
        
        for (int x = 0; x < depositos; x++ ) {
            int posX=(int)((Integer)model2.getValueAt(x, 1)*XNorm);
            int posY=(int)((Integer)model2.getValueAt(x, 2)*YNorm);

            int cR=r.nextInt(250);
            int cG=r.nextInt(250);
            int cB=r.nextInt(250);
            g.setColor(new Color(cR, cG, cB));
            for (int y = 0; y < gasolineras; y++ ) {
                if (est.getGasolinera(y)==x)
                {
                    int posmodX=(int)((Integer)model1.getValueAt(y, 1)*XNorm);
                    int posmodY=400-(int)((Integer)model1.getValueAt(y, 2)*YNorm);
                    
                    g.drawLine(posX, 400- posY, posmodX, posmodY);
                    
                }
            }
        }
        g = dibujo.getGraphics();
    }

    
    private void dibujar_Estado(estado est, int pX,int pY){
        javax.swing.table.DefaultTableModel model1;
        javax.swing.table.DefaultTableModel model2;
        model1=(javax.swing.table.DefaultTableModel)this.ctrlListaGasolineras.getModel();
        model2=(javax.swing.table.DefaultTableModel)this.ctrlListaDepositos.getModel();

        int gasolineras=model1.getRowCount();
        int depositos=model2.getRowCount();

        int xMaxReal=Integer.parseInt(ctrlXMaxima.getText());
        int yMaxReal=Integer.parseInt(ctrlYMaxima.getText());
        
        int xMaxPantalla=550;
        int yMaxPantalla=400;
        
        float XNorm=(float)xMaxPantalla/(float)xMaxReal;
        float YNorm=(float)yMaxPantalla/(float)yMaxReal;
        
         Graphics g = dibujo.getGraphics();
        
        for (int x = 0; x < depositos; x++ ) {
            int posX=(int)((Integer)model2.getValueAt(x, 1)*XNorm);
            int posY=(int)((Integer)model2.getValueAt(x, 2)*YNorm);

            int posX1=posX-pX;
            int posY1=posY-pY;
            if (posX1<0){posX1=posX1*-1;}
            if (posY1<0){posY1=posY1*-1;}
            if ((posY1<4)&&(posX1<4))
            {
                g.setColor(Color.RED);
                for (int y = 0; y < gasolineras; y++ ) {
                if (est.getGasolinera(y)==x)
                {
                    int posmodX=(int)((Integer)model1.getValueAt(y, 1)*XNorm);
                    int posmodY=400-(int)((Integer)model1.getValueAt(y, 2)*YNorm);
                    
                    g.drawLine(posX, 400- posY, posmodX, posmodY);
                    
                }
                }
            
            }
        }
        g = dibujo.getGraphics();
    }
    private void dibujar_Base(){
        javax.swing.table.DefaultTableModel model1;
        javax.swing.table.DefaultTableModel model2;
        model1=(javax.swing.table.DefaultTableModel)this.ctrlListaGasolineras.getModel();
        model2=(javax.swing.table.DefaultTableModel)this.ctrlListaDepositos.getModel();
        
     //   dibujo.setVisible(true);
        int xMaxReal=Integer.parseInt(ctrlXMaxima.getText());
        int yMaxReal=Integer.parseInt(ctrlYMaxima.getText());
        
        int xMaxPantalla=550;
        int yMaxPantalla=400;
        
        X1.setText(String.valueOf((int)xMaxReal/3));
        X2.setText(String.valueOf((int)xMaxReal*2/3));
        X3.setText(String.valueOf(xMaxReal));

        Y1.setText(String.valueOf((int)yMaxReal/3));
        Y2.setText(String.valueOf((int)yMaxReal*2/3));
        Y3.setText(String.valueOf(yMaxReal));

        float XNorm=(float)xMaxPantalla/(float)xMaxReal;
        float YNorm=(float)yMaxPantalla/(float)yMaxReal;
        
        //Depositos
        int gasolineras=model1.getRowCount();
        int depositos=model2.getRowCount();
        
        Graphics g = dibujo.getGraphics();
        
        dibujo.setBackground(Color.WHITE);    
        g.setColor(Color.WHITE);
        g.fillRect(0,0,xMaxPantalla,yMaxPantalla);

        g.setColor(new Color(0,0,255));//0, 0, 255
        for (int x = 0; x < depositos; x++ ) {
            int posX=(int)((Integer)model2.getValueAt(x, 1)*XNorm);
            int posY=400-(int)((Integer)model2.getValueAt(x, 2)*YNorm);
            g.drawOval(posX, posY, 4, 4);
        }

        for (int x = 0; x < gasolineras; x++ ) {
            int posX=(int)((Integer)model1.getValueAt(x, 1)*XNorm);
            int posY=400 -(int)((Integer)model1.getValueAt(x, 2)*YNorm);
                    switch ((Integer)model1.getValueAt(x, 3)) {
                    case 1:
                        //ITERACIONES;
                        g.setColor(new Color(153, 255, 153));
                        g.drawOval(posX, posY, 4, 4);
                        break;
                    case 2:
                        g.setColor(new Color(0, 204, 102));
                        g.drawOval(posX, posY, 4, 4);
                        break;
                    case 3:
                        g.setColor(new Color(0, 102, 102));
                        g.drawOval(posX, posY, 4, 4);
                        break;
                    default:
                        g.setColor(Color.BLACK);
                        g.drawOval(posX, posY, 4, 4);

                    }
            
        }

        g = dibujo.getGraphics();
        
        
    }
    
    
    
    private void mostrar_estado(estado est,javax.swing.table.DefaultTableModel m_Estado,javax.swing.table.DefaultTableModel m_EstadoInf,javax.swing.table.DefaultTableModel model2)
    {
        int gasolineras=est.countGasolineras();
        int depositos=est.countCamiones();
        
        m_Estado.setRowCount(gasolineras);
        
        for (int x = 0; x < gasolineras; x++ ) {
            m_Estado.setValueAt("Gas."+x,x,0);
            if (est.getGasolinera(x)==-1)
            {
            m_Estado.setValueAt("---",x,1);
            }else
            {
            m_Estado.setValueAt("Dep."+String.valueOf(est.getGasolinera(x)),x,1);
            }
        }
        m_EstadoInf.setRowCount(depositos);

        for (int x = 0; x < depositos; x++ ) {
            m_EstadoInf.setValueAt("Dep."+x,x,0);
            m_EstadoInf.setValueAt(model2.getValueAt(x,4),x,1);
            m_EstadoInf.setValueAt(est.getNumKilometros(x),x,2);
            m_EstadoInf.setValueAt(model2.getValueAt(x,3),x,3);
            m_EstadoInf.setValueAt(est.getNumViajes(x),x,4);
            
        }

    }

    
    
    private void crearTablasConsulta(){

        javax.swing.table.DefaultTableModel model1;
        javax.swing.table.DefaultTableModel model2;
        model1=(javax.swing.table.DefaultTableModel)this.ctrlListaGasolineras.getModel();
        model2=(javax.swing.table.DefaultTableModel)this.ctrlListaDepositos.getModel();

        int gasolineras=Integer.parseInt(ctrlNumeroPeticiones.getText());
        int depositos=Integer.parseInt(ctrlDepositos.getText());

        c=new consulta(depositos,gasolineras);
        
        for (int x = 0; x < gasolineras; x++ )
        {
            c.setPrioridad(x,(Integer)model1.getValueAt(x,3));
        }

        for (int x = 0; x < depositos; x++ )
        {
            for (int y = 0; y < gasolineras; y++ )
            {
                int DistX = (Integer)model2.getValueAt(x,1)-(Integer)model1.getValueAt(y,1);
                int DistY = (Integer)model2.getValueAt(x,2)-(Integer)model1.getValueAt(y,2);
                if (DistX<0){DistX=DistX*-1;}
                if (DistY<0){DistY=DistY*-1;}
                
                c.setDistancia(x,y,DistX+DistY);
            }
        }
        
   
    }
    
    private static String rellenarAleatorio(String obj,int Valor, int A_partir_de,Random r){
	try {
            if ((obj.trim().isEmpty()) || (!isNumeric(obj)) || (Integer.parseInt(obj)<=0))
            {Integer aleatorio;
                aleatorio = r.nextInt(Valor)+A_partir_de;
                return aleatorio.toString();
            }else{return obj;}
	} catch (Exception ex ){
            ex.printStackTrace ();  
            return "";	
	}
    }
    private static boolean isNumeric(String cadena){
	try {
            Integer.parseInt(cadena);
            return true;
	} catch (NumberFormatException ex){
            ex.printStackTrace (); 
            return false;
	}
    }
    public String loadFile(Frame f, String title, String defDir, String fileType) {
        FileDialog fd = new FileDialog(f, title, FileDialog.LOAD);
        fd.setFile(fileType);
        fd.setDirectory(defDir);
        fd.setLocation(50, 50);
        fd.setVisible(true);
        return fd.getDirectory() + System.getProperty("file.separator") + fd.getFile();
    }
    public String saveFile(Frame f, String title, String defDir, String fileType) {
        FileDialog fd = new FileDialog(f, title,    FileDialog.SAVE);
        fd.setFile(fileType);
        fd.setDirectory(defDir);
        fd.setLocation(50, 50);
        fd.setVisible(true);
        return fd.getDirectory() + System.getProperty("file.separator") + fd.getFile();
    }

    
    // </editor-fold>
  
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelDistancias;
    private javax.swing.JPanel PanelGeneracion;
    private javax.swing.JPanel PanelInicializar;
    private javax.swing.JLabel X0;
    private javax.swing.JLabel X1;
    private javax.swing.JLabel X2;
    private javax.swing.JLabel X3;
    private javax.swing.JLabel XKm;
    private javax.swing.JLabel Y0;
    private javax.swing.JLabel Y1;
    private javax.swing.JLabel Y2;
    private javax.swing.JLabel Y3;
    private javax.swing.JLabel YKm;
    private javax.swing.JRadioButton conGenBuenGreedy;
    private javax.swing.JButton ctrlAleatorio;
    private javax.swing.JButton ctrlAnnealing;
    private javax.swing.JButton ctrlConsistencia;
    private javax.swing.JButton ctrlCrearEstadoInicial;
    private javax.swing.JTextField ctrlDepositos;
    private javax.swing.JButton ctrlDibujarEstadoInicial;
    private javax.swing.JTable ctrlEstadoInicial;
    private javax.swing.JTable ctrlEstadoInicialInf;
    private javax.swing.JButton ctrlExportar;
    private javax.swing.JRadioButton ctrlGenAleatoria;
    private javax.swing.JRadioButton ctrlGenGreedy;
    private javax.swing.JRadioButton ctrlGenVacio;
    private javax.swing.ButtonGroup ctrlGeneracion;
    private javax.swing.JTextField ctrlGrado;
    private javax.swing.ButtonGroup ctrlGrafico;
    private javax.swing.ButtonGroup ctrlHeu;
    private javax.swing.JButton ctrlHill;
    private javax.swing.JButton ctrlImportar;
    private javax.swing.JTextField ctrlIteracion;
    private javax.swing.JTextField ctrlK;
    private javax.swing.JTextField ctrlKm;
    private javax.swing.JTextField ctrlL;
    private javax.swing.JLabel ctrlLey1;
    private javax.swing.JLabel ctrlLey2;
    private javax.swing.JLabel ctrlLey3;
    private javax.swing.JLabel ctrlLey4;
    private javax.swing.JLabel ctrlLey5;
    private javax.swing.JTable ctrlListaDepositos;
    private javax.swing.JTable ctrlListaGasolineras;
    private javax.swing.JTextField ctrlNumeroPeticiones;
    private javax.swing.JTextArea ctrlPasos;
    private javax.swing.JButton ctrlRutas;
    private javax.swing.JLabel ctrlTiempo;
    private javax.swing.JLabel ctrlTiempoIni;
    private javax.swing.JLabel ctrlTiempoTemp;
    private javax.swing.JTextField ctrlViaje;
    private javax.swing.JTextField ctrlXMaxima;
    private javax.swing.JTextField ctrlYMaxima;
    private java.awt.Canvas dibujo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblDepositos;
    private javax.swing.JLabel lblIteraciones;
    private javax.swing.JLabel lblK;
    private javax.swing.JLabel lblL;
    private javax.swing.JLabel lblListaDepositos;
    private javax.swing.JLabel lblListaGasolineras;
    private javax.swing.JLabel lblNumeroPeticiones;
    private javax.swing.JLabel lblTemperatura;
    private javax.swing.JLabel lblViajesFijos;
    private javax.swing.JLabel lblXMaxima;
    private javax.swing.JLabel lblYmaxima;
    private javax.swing.JLabel lbllKmFijos;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JRadioButton optEF;
    private javax.swing.JRadioButton optEI;
    private javax.swing.JRadioButton optHeu1;
    private javax.swing.JPanel panelParametrosSimulated;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JPanel tabFinal;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
