package IA.Centrals;


import java.awt.*;
import java.awt.geom.*;
import java.awt.geom.Arc2D.Float;

import javax.swing.*;
import java.util.Date;
import java.util.Calendar;

import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Vector;

import aima.search.framework.Successor;
import aima.search.framework.GraphSearch;
import aima.search.framework.Problem;
import aima.search.framework.Search;
import aima.search.framework.SearchAgent;
import aima.search.framework.TreeSearch;
import aima.search.informed.SimulatedAnnealingSearch;
import aima.search.informed.HillClimbingSearch;
import java.util.*;
import java.lang.Number; 

/**
 *
 * @author  javier
 */
public class CentralsJFrame extends javax.swing.JFrame {
	private static int DIFICULTAD = 5;
	private Representacio p;
	private int alg=1;
	private int heur=1;
	private int nc=15;//numero centrals
	private int nr=10; //num repetidors
	private int amplada = 12;
	private int altura = 12;
	private int alfa = 5;
	private int beta = 2;
	private int gamma = 1;
	private int maxRepetidors = 4;
	private int iter=1000;
	
	//(2000,100,5,0.001);
	private int inan1 = 2000;
	private int inan2 = 100;
	private int inan3 = 5;
	private float inan4 = (float) 0.001;	
	
	private int ponderacio = 1;
	
	
	/** Creates new form probAntenasJFrame */
	public CentralsJFrame() {
		initComponents();
		
		p = new Representacio(nc,nr,amplada,altura,alfa,beta,gamma,maxRepetidors);
		
		
		drawPanel1.setPlano(amplada,altura,p.getPlano(),p.getSol(),p.getVNodo(),p.getNumCentrals());
			
	
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;
		
		buttonGroup1 = new javax.swing.ButtonGroup();
		buttonGroup2 = new javax.swing.ButtonGroup();
		jPanel3 = new javax.swing.JPanel();
		size = new javax.swing.JLabel();
		sizes = new javax.swing.JComboBox();
		sizes.addItem("10x10");
		sizes.addItem("11x11");
		sizes.addItem("12x12");
		sizes.addItem("13x13");
		sizes.addItem("14x14");
		sizes.addItem("15x15");
		sizes.addItem("16x16");
		sizes.addItem("17x17");
		sizes.addItem("18x18");
		sizes.addItem("19x19");
		sizes.addItem("20x20");
		sizes.setSelectedIndex(0);
		numCLabel = new javax.swing.JLabel();
		numRLabel = new javax.swing.JLabel();
		ncent = new javax.swing.JTextField();
		nrep = new javax.swing.JTextField();
		numsol = new javax.swing.JTextField();
		nSolL = new javax.swing.JLabel();
		numsol = new javax.swing.JTextField();
		
		iteracioL = new javax.swing.JLabel();
		iteracio = new javax.swing.JTextField();
		
		alfaL = new javax.swing.JLabel();
		alfaT = new javax.swing.JTextField();
		betaL = new javax.swing.JLabel();
		betaT = new javax.swing.JTextField();
		gammaL = new javax.swing.JLabel();
		gammaT = new javax.swing.JTextField();
		maxRL = new javax.swing.JLabel();
		maxRT= new javax.swing.JTextField();
		
		nfilL = new javax.swing.JLabel();
		ncolL = new javax.swing.JLabel();
		nfil = new javax.swing.JTextField();
		ncol = new javax.swing.JTextField();
		pondL = new javax.swing.JLabel();
		pond = new javax.swing.JTextField();
		jPanel2 = new javax.swing.JPanel();
		jLabel4 = new javax.swing.JLabel();
		HC = new javax.swing.JRadioButton();
		SA = new javax.swing.JRadioButton();
		op1 = new javax.swing.JRadioButton();
		op2 = new javax.swing.JRadioButton();
		op3 = new javax.swing.JRadioButton();
		op4 = new javax.swing.JRadioButton();
		op5 = new javax.swing.JRadioButton();
		op6 = new javax.swing.JRadioButton();
		
		an1= new javax.swing.JTextField();
		an2= new javax.swing.JTextField();
		an3= new javax.swing.JTextField();
		an4= new javax.swing.JTextField();
		
		jPanel5 = new javax.swing.JPanel();
		jLabel3 = new javax.swing.JLabel();
		heur1 = new javax.swing.JRadioButton();
		heur2 = new javax.swing.JRadioButton();
		heur3 = new javax.swing.JRadioButton();
		jPanel6 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		tiempo = new javax.swing.JTextField();
		jPanel1 = new javax.swing.JPanel();
		reiniciar = new javax.swing.JButton();
		ejecutar = new javax.swing.JButton();
		reset = new javax.swing.JButton();
		jPanel7 = new javax.swing.JPanel();
		instrum = new javax.swing.JTextArea();
		drawPanel1 = new CentralsPanel();
		jMenuBar1 = new javax.swing.JMenuBar();
		jMenu1 = new javax.swing.JMenu();
		Salir = new javax.swing.JMenuItem();
		
		getContentPane().setLayout(new java.awt.GridBagLayout());
		
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("IA: Centrals i Repetidors 2k6");
		jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
		
		size.setText("Tama\u00f1o: ");
		jPanel3.add(size);
		
		sizes.setToolTipText("Tama\u00f1o del mapa");
		sizes.setPreferredSize(new java.awt.Dimension(70, 24));
		sizes.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				sizesActionPerformed(evt);
			}
		});
		
		//jPanel3.add(sizes);
		nfilL.setText("Files:");
		jPanel3.add(nfilL);
		
		nfil.setColumns(3);
		nfil.setText(this.altura+"");
		jPanel3.add(nfil);
		
		ncolL.setText("Columnes:");
		jPanel3.add(ncolL);
				
		ncol.setColumns(3);
		ncol.setText(this.amplada+"");
		jPanel3.add(ncol);
		
		numCLabel.setText("Num Centrales:");
		jPanel3.add(numCLabel);
		
		ncent.setColumns(3);
		ncent.setText(this.nc+"");
		jPanel3.add(ncent);
		
		numRLabel.setText("Num Repetidors:");
		jPanel3.add(numRLabel);
				
		nrep.setColumns(3);
		nrep.setText(this.nr+"");
		jPanel3.add(nrep);
		
		
		
		alfaL.setText("a");
		jPanel3.add(alfaL);
		alfaT.setColumns(1);
		alfaT.setText(5+"");
		jPanel3.add(alfaT);
		
		betaL.setText("b");
		jPanel3.add(betaL);
		betaT.setColumns(1);
		betaT.setText(2+"");
		jPanel3.add(betaT);
		
		gammaL.setText("g");
		jPanel3.add(gammaL);
		gammaT.setColumns(1);
		gammaT.setText(1+"");
		jPanel3.add(gammaT);
		
		maxRL.setText("mr");
		jPanel3.add(maxRL);
		maxRT.setColumns(2);
		maxRT.setText(this.maxRepetidors+"");
		jPanel3.add(maxRT);
		
						
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		getContentPane().add(jPanel3, gridBagConstraints);
		
		jPanel2.setLayout(new java.awt.GridBagLayout());
		
		jLabel4.setText("Algoritmo: ");
		jPanel2.add(jLabel4, new java.awt.GridBagConstraints());
		
		buttonGroup1.add(HC);
		HC.setSelected(true);
		HC.setText("Hill Climbing");
		HC.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				HCActionPerformed(evt);
			}
		});
		
		jPanel2.add(HC, new java.awt.GridBagConstraints());
		
		buttonGroup1.add(SA);
		SA.setText("Annealing");
		SA.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				SAActionPerformed(evt);
			}
		});
		
		jPanel2.add(SA, new java.awt.GridBagConstraints());
		
		an1.setColumns(4);
		an1.setText(this.inan1+"");
		jPanel2.add(an1, new java.awt.GridBagConstraints());
		an2.setColumns(4);
		an2.setText(this.inan2+"");
		jPanel2.add(an2, new java.awt.GridBagConstraints());
		an3.setColumns(4);
		an3.setText(this.inan3+"");
		jPanel2.add(an3, new java.awt.GridBagConstraints());
		an4.setColumns(4);
		an4.setText(this.inan4+"");
		jPanel2.add(an4, new java.awt.GridBagConstraints());
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.ipadx = 6;
		getContentPane().add(jPanel2, gridBagConstraints);
		
		jPanel5.setLayout(new java.awt.GridBagLayout());
		
		jLabel3.setText("Heuristicas: ");
		jPanel5.add(jLabel3, new java.awt.GridBagConstraints());
		
		buttonGroup2.add(heur1);
		heur1.setSelected(true);
		heur1.setLabel("Heuristico 1");
		heur1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				heur1ActionPerformed(evt);
			}
		});
		
		jPanel5.add(heur1, new java.awt.GridBagConstraints());
		
		buttonGroup2.add(heur2);
		heur2.setLabel("Heuristico 2");
		heur2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				heur2ActionPerformed(evt);
			}
		});
		
		jPanel5.add(heur2, new java.awt.GridBagConstraints());
		
		buttonGroup2.add(heur3);
		heur3.setLabel("Heuristico 3");
		heur3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				heur3ActionPerformed(evt);
			}
		});
		
		jPanel5.add(heur3, new java.awt.GridBagConstraints());
		
		//PONDERACIO HEUR 3
		pondL.setText(" Ponderacio:");
		jPanel5.add(pondL);
		
		pond.setColumns(3);
		pond.setText(1+"");//69=pot
		jPanel5.add(pond);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridy = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		getContentPane().add(jPanel5, gridBagConstraints);
		
		jPanel6.setLayout(new java.awt.GridBagLayout());
		
			
		jLabel1.setText("Tiempo: ");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.insets = new java.awt.Insets(1, 27, 0, 0);
		jPanel6.add(jLabel1, gridBagConstraints);
		
		tiempo.setColumns(10);
		tiempo.setEditable(false);
		jPanel6.add(tiempo, new java.awt.GridBagConstraints());
		

		op1.setText("InterCon1"); op1.setSelected(false);
		op2.setText("InterCon2"); op2.setSelected(true);
		op3.setText("AfegirRep1"); op3.setSelected(true);
		op4.setText("TreureRep1"); op4.setSelected(true);
		op5.setText("InterRep1"); op5.setSelected(true);
		op6.setText("InterRep2"); op6.setSelected(true);
		
		jPanel6.add(op1, new java.awt.GridBagConstraints());
		jPanel6.add(op2, new java.awt.GridBagConstraints());
		jPanel6.add(op3, new java.awt.GridBagConstraints());
		jPanel6.add(op4, new java.awt.GridBagConstraints());
		jPanel6.add(op5, new java.awt.GridBagConstraints());
		jPanel6.add(op6, new java.awt.GridBagConstraints());
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridy = 4;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		getContentPane().add(jPanel6, gridBagConstraints);
		
		jPanel1.setLayout(new java.awt.GridBagLayout());
		
		jPanel1.setMinimumSize(new java.awt.Dimension(100, 35));
		jPanel1.setPreferredSize(new java.awt.Dimension(400, 35));
		reiniciar.setText("Reiniciar Grafo");
		reiniciar.setToolTipText("Reiniciar el mapa");
		reiniciar.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				reiniciarMousePressed(evt);
			}
		});
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		jPanel1.add(reiniciar, gridBagConstraints);
		
		ejecutar.setText("Ejecutar");
		reset.setText("Nueva Solucion");
		ejecutar.setToolTipText("Ejecutar el algoritmo seleccionado");
		ejecutar.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				ejecutarMousePressed(evt);
			}
		});
		reset.setToolTipText("resetar");
		reset.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				resetMousePressed(evt);
			}
		});
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		jPanel1.add(ejecutar, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		jPanel1.add(reset, gridBagConstraints);
		
		nSolL.setText("Sol:");
		numsol.setColumns(3);
		numsol.setText(1+"");
		
		iteracioL.setText("Iteracio:");
		iteracio.setColumns(4);
		iteracio.setText(1000+"");
	
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 0;
		jPanel1.add(nSolL, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 4;
		gridBagConstraints.gridy = 0;
		jPanel1.add(numsol, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 5;
		gridBagConstraints.gridy = 0;
		jPanel1.add(iteracioL, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 6;
		gridBagConstraints.gridy = 0;
		jPanel1.add(iteracio, gridBagConstraints);
		
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 6;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		getContentPane().add(jPanel1, gridBagConstraints);
		
		jPanel7.setLayout(new java.awt.GridBagLayout());
		
		jPanel7.setPreferredSize(new java.awt.Dimension(600, 500));
		instrum.setColumns(10);
		instrum.setEditable(false);
		instrum.setLineWrap(true);
		instrum.setRows(10);
		instrum.setPreferredSize(new java.awt.Dimension(180, 300));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		jPanel7.add(instrum, gridBagConstraints);
		
		drawPanel1.setPreferredSize(new java.awt.Dimension(400, 400));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		jPanel7.add(drawPanel1, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridy = 1;
		getContentPane().add(jPanel7, gridBagConstraints);
		
		jMenu1.setText("Menu");
		Salir.setText("Salir");
		Salir.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				SalirActionPerformed(evt);
			}
		});
		
		jMenu1.add(Salir);
		
		jMenuBar1.add(jMenu1);
		
		setJMenuBar(jMenuBar1);
		
		pack();
	}
	// </editor-fold>//GEN-END:initComponents
	
	private void heur3ActionPerformed(java.awt.event.ActionEvent evt) {
//		TODO add your handling code here:
		heur=3;
	}                                     
	
	private void heur1ActionPerformed(java.awt.event.ActionEvent evt) {
		heur=1;
	}
	
	private void heur2ActionPerformed(java.awt.event.ActionEvent evt) {
		heur=2;
	}
	
	private void sizesActionPerformed(java.awt.event.ActionEvent evt) {
		amplada=sizes.getSelectedIndex()+10;
		altura=sizes.getSelectedIndex()+10;
		p = new Representacio(nc,nr,amplada,altura,alfa,beta,gamma,maxRepetidors);
		drawPanel1.setPlano(amplada,altura,p.getPlano(),p.getSol(),p.getVNodo() ,p.getNumCentrals());
	}
	
	private void SAActionPerformed(java.awt.event.ActionEvent evt) {
		alg=2;
	}
	
	private void HCActionPerformed(java.awt.event.ActionEvent evt) {
		alg=1;
	}
	
	private void reiniciarMousePressed(java.awt.event.MouseEvent evt) {
		String s;
		s=ncent.getText();
		nc=Integer.parseInt(s);
		s=nrep.getText();
		nr=Integer.parseInt(s);
		s=pond.getText();
		//pot=Integer.parseInt(s);
		s=nfil.getText();
		altura = Integer.parseInt(s);
		s=ncol.getText();
		amplada = Integer.parseInt(s);
		s=alfaT.getText();
		alfa = Integer.parseInt(s);
		s=betaT.getText();
		beta = Integer.parseInt(s);
		s=gammaT.getText();
		gamma = Integer.parseInt(s);
		s=maxRT.getText();
		maxRepetidors = Integer.parseInt(s);
		
		//boolean nop1,nop2,nop3,nop4,nop5;
		//nop1=op1.isSelected();
		
		p = new Representacio(nc,nr,amplada,altura,alfa,beta,gamma,maxRepetidors);
		
		s=numsol.getText();
		int sol = Integer.parseInt(s);
		
		p.solucioInicial(sol);
		
		
		drawPanel1.setPlano(amplada, altura, p.getPlano(),p.getSol(),p.getVNodo() ,p.getNumCentrals());
		instrum.setText("");
		instrum.append("ERROR INICIAL="+p.getErrorTotal(1)+"\n");
		instrum.append("SOLUCIO \n");
		for (int i=0;i< p.getEstat().size();i++) {
			Vector v = (Vector) p.getEstat().get(i);
			if(i<p.getNumCentrals())instrum.append("(C)");
			else if(v.size()!=0)instrum.append("(R)");
			for (int j=0;j<v.size();j++) {
				instrum.append(v.get(j)+"->");
			}
			if(i==p.getNumCentrals()-1)instrum.append("\n");
			else if(i<p.getNumCentrals())instrum.append("#  ");
			else if(v.size()!=0 )instrum.append("\n");
		}		
		
	}
	
	private void SalirActionPerformed(java.awt.event.ActionEvent evt) {
		dispose();
	}
	
	
	private void resetMousePressed(java.awt.event.MouseEvent evt) {
		String s;
		s=numsol.getText();
		int sol = Integer.parseInt(s);
		
		s=maxRT.getText();
		maxRepetidors = Integer.parseInt(s);
		
		//p = new Representacio(nc,nr,amplada,altura,alfa,beta,gamma,maxRepetidors);
		
		p.setMaxRepetidors(maxRepetidors);
		p.solucioInicial(sol);
		
		drawPanel1.setPlano(amplada, altura, p.getPlano(),p.getSol(),p.getVNodo() ,p.getNumCentrals());
		instrum.setText("");
		instrum.append("ERROR INICIAL="+p.getErrorTotal(1)+"\n");
		instrum.append("SOLUCIO \n");
		for (int i=0;i< p.getEstat().size();i++) {
			Vector v = (Vector) p.getEstat().get(i);
			if(i<p.getNumCentrals())instrum.append("(C)");
			else if(v.size()!=0)instrum.append("(R)");
			for (int j=0;j<v.size();j++) {
				instrum.append(v.get(j)+"->");
			}
			if(i==p.getNumCentrals()-1)instrum.append("\n");
			else if(i<p.getNumCentrals())instrum.append("#  ");
			else if(v.size()!=0 )instrum.append("\n");
		}		
	}
	private void ejecutarMousePressed(java.awt.event.MouseEvent evt) {
		Search search=null; //new DepthLimitedSearch(2*nc);;
		Problem problem =null;//  new Problem(p,new ProbAntenasSuccessorFunction(), new ProbAntenasGoalTest(),new ProbAntenasHeuristicFunction());
		
		//per fixar el num de repetidors
		String smr;
		smr=maxRT.getText();
		maxRepetidors = Integer.parseInt(smr);
		p.setMaxRepetidors(maxRepetidors);
		String s;
		s=this.pond.getText();
		this.ponderacio = Integer.parseInt(s);
		s=this.iteracio.getText();
		this.iter=Integer.parseInt(s);
		this.iteracio.setText(iter+1+"");
		
		s=this.an1.getText();
		this.inan1=Integer.parseInt(s);
		s=this.an2.getText();
		this.inan2=Integer.parseInt(s);
		s=this.an3.getText();
		this.inan3=Integer.parseInt(s);
		s=this.an4.getText();
		//Float f = new Float(s.va	)
		this.inan4= (float)Double.parseDouble(s);
		
		boolean[] ops= new boolean[6];
		ops[0] = op1.isSelected();
		ops[1] = op2.isSelected();
		ops[2] = op3.isSelected();
		ops[3] = op4.isSelected();
		ops[4] = op5.isSelected();
		ops[5] = op6.isSelected();
		if (heur==1)problem = new Problem (p,new CentralsGeneradorEstats(iter,ops),	new CentralsEstatFinal(), new CentralsFuncioHeuristica1());
		if (heur==2)problem = new Problem (p,new CentralsGeneradorEstats(iter,ops),	new CentralsEstatFinal(), new CentralsFuncioHeuristica2());
		if (heur==3)problem = new Problem (p,new CentralsGeneradorEstats(iter,ops),	new CentralsEstatFinal(), new CentralsFuncioHeuristica3(this.ponderacio));
			
		
		if (alg==1) search =  new HillClimbingSearch();
		if (alg==2) search =  new SimulatedAnnealingSearch(inan1,inan2,inan3,inan4);//(2000,100,5,0.001);
		
		//p.printCobertura();
		//System.out.println("--"+p.calculaCobertura());
		
		//     Search search =  new BreadthFirstSearch(new TreeSearch());
		//Search search =  new HillClimbingSearch();
		try {
			Date d1,d2;
			Calendar a,b;
			
			d1=new Date();
			SearchAgent agent = new SearchAgent(problem,search);
			d2=new Date();
			
			a= Calendar.getInstance();
			b= Calendar.getInstance();
			a.setTime(d1);
			b.setTime(d2);
			
			long m=b.getTimeInMillis()-a.getTimeInMillis();
			
			tiempo.setText(m+" ms");
			//ProbAntenasBoard pf= (ProbAntenasBoard) search.getGoalState();
			Representacio pf =null;
                        if (alg==1) {
			 pf = (Representacio) ((HillClimbingSearch) search).getLastSearchState();
                        } else {
                          pf = (Representacio) ((SimulatedAnnealingSearch) search).getLastSearchState();

                        }
			//pf.printSolucio();
			drawPanel1.setPlano(amplada,altura,pf.getPlano(),pf.getSol(),pf.getVNodo() ,p.getNumCentrals());//3=tp
									
			//pf.printAntenas();
			//pf.printCobertura();
			//List actions=agent.getActions();
			//printActions(agent.getActions());
			
			printInstrumentation(agent.getInstrumentation());
			//instrum.append("hola ke tal");//Cobertura: "+ pf.calculaCobertura()+"\n");
			//for (int i=0;i<nc;i++)
			//instrum.append("hola ke tal 2");//Antena "+i+":"+ pf.antenaToString(i)+"\n");
			
			instrum.append("ERROR INICI="+p.getErrorTotal(1)+"\n");
			instrum.append("ERROR FINAL="+pf.getErrorTotal(1)+"\n");
			instrum.append("SOLUCIO \n");
			for (int i=0;i< pf.getEstat().size();i++) {
				Vector v = (Vector) pf.getEstat().get(i);
				if(i<pf.getNumCentrals())instrum.append("(C)");
				else if(v.size()!=0)instrum.append("(R)");
				for (int j=0;j<v.size();j++) {
					instrum.append(v.get(j)+"->");
				}
				if(i==pf.getNumCentrals()-1)instrum.append("\n");
				else if(i<pf.getNumCentrals())instrum.append("#  ");
				else if(v.size()!=0 )instrum.append("\n");
			}				
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private void printInstrumentation(Properties properties) {
		Iterator keys = properties.keySet().iterator();
		instrum.setText("");
		while (keys.hasNext()) {
			String key = (String) keys.next();
			String property = properties.getProperty(key);
			instrum.append(key + " : " + property+"\n");
			//System.out.println(key + " : " + property);
		}
		
	}
	private static void printActions(List actions) {
		for (int i = 0; i < actions.size(); i++) {
			String action = (String) actions.get(i);
			System.out.println(action);
		}
	}
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new CentralsJFrame().setVisible(true);
			}
		});             
	}
	
	// Variables declaration - do not modify//GEN-BEGIN:variables
	
	private javax.swing.JRadioButton op1;
	private javax.swing.JRadioButton op2;
	private javax.swing.JRadioButton op3;
	private javax.swing.JRadioButton op4;
	private javax.swing.JRadioButton op5;
	private javax.swing.JRadioButton op6;
	
	
	private javax.swing.JRadioButton HC;
	private javax.swing.JRadioButton SA;
	private javax.swing.JMenuItem Salir;
	private javax.swing.ButtonGroup buttonGroup1;
	private javax.swing.ButtonGroup buttonGroup2;
	private CentralsPanel drawPanel1;
	private javax.swing.JButton ejecutar;
	private javax.swing.JButton reset;
	private javax.swing.JRadioButton heur1;
	private javax.swing.JRadioButton heur2;
	private javax.swing.JRadioButton heur3;
	private javax.swing.JTextArea instrum;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JMenu jMenu1;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JPanel jPanel7;
	
	//Inputs alfas...
	private javax.swing.JLabel alfaL;
	private javax.swing.JTextField alfaT;
	private javax.swing.JLabel betaL;
	private javax.swing.JTextField betaT;
	private javax.swing.JLabel gammaL;
	private javax.swing.JTextField gammaT;
	private javax.swing.JLabel maxRL ;
	private javax.swing.JTextField 	maxRT;
	
	
	//inputs c i r
	private javax.swing.JTextField ncent;
	private javax.swing.JTextField nrep;
	private javax.swing.JLabel numCLabel;
	private javax.swing.JLabel numRLabel;
	//input tama�o
	private javax.swing.JTextField nfil;
	private javax.swing.JTextField ncol;
	private javax.swing.JLabel nfilL;
	private javax.swing.JLabel ncolL;
	
	private javax.swing.JTextField numsol;
	private javax.swing.JLabel nSolL;
	
	private javax.swing.JTextField iteracio;
	private javax.swing.JLabel iteracioL;
	
	private javax.swing.JLabel pondL;
	private javax.swing.JTextField pond;
	private javax.swing.JButton reiniciar;
	private javax.swing.JLabel size;
	private javax.swing.JComboBox sizes;
	private javax.swing.JTextField tiempo;
	
	private javax.swing.JTextField 	an1;
	private javax.swing.JTextField 	an2;
	private javax.swing.JTextField 	an3;
	private javax.swing.JTextField 	an4;
	// End of variables declaration//GEN-END:variables


	public CentralsPanel getDrawPanel1() {
		return drawPanel1;
	}
	
}
